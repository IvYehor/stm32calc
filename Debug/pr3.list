
pr3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef0  08002ef0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef0  08002ef0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef0  08002ef0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08002f68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002f68  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007630  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001864  00000000  00000000  0002770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  00028f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000620  00000000  00000000  00029780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d20  00000000  00000000  00029da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a083  00000000  00000000  00040ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fcd3  00000000  00000000  0004ab43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000228c  00000000  00000000  000ca818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ccaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eac 	.word	0x08002eac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002eac 	.word	0x08002eac

0800014c <computeEquation>:

#include "calculator2.h"

void computeEquation(uint8_t *expression, uint8_t *filled, uint8_t exprWidth) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
	uint8_t nextTokenBegin, nextTokenEnd;
	struct Node *tree = parseE(expression, *filled, &nextTokenBegin, &nextTokenEnd);
 800015a:	68bb      	ldr	r3, [r7, #8]
 800015c:	7819      	ldrb	r1, [r3, #0]
 800015e:	f107 031a 	add.w	r3, r7, #26
 8000162:	f107 021b 	add.w	r2, r7, #27
 8000166:	68f8      	ldr	r0, [r7, #12]
 8000168:	f000 f9bf 	bl	80004ea <parseE>
 800016c:	61f8      	str	r0, [r7, #28]
	if(tree == NULL) {
 800016e:	69fb      	ldr	r3, [r7, #28]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d106      	bne.n	8000182 <computeEquation+0x36>
		pasteErrorToExpression(expression, filled, exprWidth, 0);
 8000174:	79fa      	ldrb	r2, [r7, #7]
 8000176:	2300      	movs	r3, #0
 8000178:	68b9      	ldr	r1, [r7, #8]
 800017a:	68f8      	ldr	r0, [r7, #12]
 800017c:	f000 f944 	bl	8000408 <pasteErrorToExpression>
 8000180:	e015      	b.n	80001ae <computeEquation+0x62>
		return;
	}
	uint32_t res;
	if(!evaluate(tree, &res)) {
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	4619      	mov	r1, r3
 8000188:	69f8      	ldr	r0, [r7, #28]
 800018a:	f000 f813 	bl	80001b4 <evaluate>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d106      	bne.n	80001a2 <computeEquation+0x56>
		pasteToExpression(expression, filled, exprWidth, res);
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	79fa      	ldrb	r2, [r7, #7]
 8000198:	68b9      	ldr	r1, [r7, #8]
 800019a:	68f8      	ldr	r0, [r7, #12]
 800019c:	f000 f8c8 	bl	8000330 <pasteToExpression>
 80001a0:	e005      	b.n	80001ae <computeEquation+0x62>
	}
	else {
		pasteErrorToExpression(expression, filled, exprWidth, 1);
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	2301      	movs	r3, #1
 80001a6:	68b9      	ldr	r1, [r7, #8]
 80001a8:	68f8      	ldr	r0, [r7, #12]
 80001aa:	f000 f92d 	bl	8000408 <pasteErrorToExpression>
	}
}
 80001ae:	3720      	adds	r7, #32
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <evaluate>:

uint8_t evaluate(struct Node *eq, uint32_t *result) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	6039      	str	r1, [r7, #0]
	uint32_t a, b;
	switch (eq->type)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b05      	cmp	r3, #5
 80001c4:	f200 80ae 	bhi.w	8000324 <evaluate+0x170>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <evaluate+0x1c>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080001e9 	.word	0x080001e9
 80001d4:	080001f3 	.word	0x080001f3
 80001d8:	08000233 	.word	0x08000233
 80001dc:	08000273 	.word	0x08000273
 80001e0:	080002b5 	.word	0x080002b5
 80001e4:	08000301 	.word	0x08000301
	{
	case NUMBER:
		*result=eq->value;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	601a      	str	r2, [r3, #0]
		break;
 80001f0:	e099      	b.n	8000326 <evaluate+0x172>
	
	case ADD:
		if(evaluate(eq->lNode, &a))
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	f107 0214 	add.w	r2, r7, #20
 80001fa:	4611      	mov	r1, r2
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffd9 	bl	80001b4 <evaluate>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <evaluate+0x58>
			return 1;
 8000208:	2301      	movs	r3, #1
 800020a:	e08d      	b.n	8000328 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	f107 0210 	add.w	r2, r7, #16
 8000214:	4611      	mov	r1, r2
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ffcc 	bl	80001b4 <evaluate>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <evaluate+0x72>
			return 1;
 8000222:	2301      	movs	r3, #1
 8000224:	e080      	b.n	8000328 <evaluate+0x174>
		*result=a+b;
 8000226:	697a      	ldr	r2, [r7, #20]
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	441a      	add	r2, r3
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	601a      	str	r2, [r3, #0]
		break;
 8000230:	e079      	b.n	8000326 <evaluate+0x172>
	
	case SUB:
		if(evaluate(eq->lNode, &a))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	f107 0214 	add.w	r2, r7, #20
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffb9 	bl	80001b4 <evaluate>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <evaluate+0x98>
			return 1;
 8000248:	2301      	movs	r3, #1
 800024a:	e06d      	b.n	8000328 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	f107 0210 	add.w	r2, r7, #16
 8000254:	4611      	mov	r1, r2
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffac 	bl	80001b4 <evaluate>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <evaluate+0xb2>
			return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e060      	b.n	8000328 <evaluate+0x174>
		*result=a-b;
 8000266:	697a      	ldr	r2, [r7, #20]
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	1ad2      	subs	r2, r2, r3
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	601a      	str	r2, [r3, #0]
		break;
 8000270:	e059      	b.n	8000326 <evaluate+0x172>
	
	case MULT:
		if(evaluate(eq->lNode, &a))
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	f107 0214 	add.w	r2, r7, #20
 800027a:	4611      	mov	r1, r2
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff99 	bl	80001b4 <evaluate>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <evaluate+0xd8>
			return 1;
 8000288:	2301      	movs	r3, #1
 800028a:	e04d      	b.n	8000328 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	f107 0210 	add.w	r2, r7, #16
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff8c 	bl	80001b4 <evaluate>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <evaluate+0xf2>
			return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e040      	b.n	8000328 <evaluate+0x174>
		*result=a*b;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	693a      	ldr	r2, [r7, #16]
 80002aa:	fb03 f202 	mul.w	r2, r3, r2
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	601a      	str	r2, [r3, #0]
		break;
 80002b2:	e038      	b.n	8000326 <evaluate+0x172>
	
	case DIV:
		uint32_t a, b;
		if(evaluate(eq->lNode, &a))
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	f107 020c 	add.w	r2, r7, #12
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff78 	bl	80001b4 <evaluate>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <evaluate+0x11a>
			return 1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	e02c      	b.n	8000328 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f107 0208 	add.w	r2, r7, #8
 80002d6:	4611      	mov	r1, r2
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff6b 	bl	80001b4 <evaluate>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <evaluate+0x134>
			return 1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	e01f      	b.n	8000328 <evaluate+0x174>
		if(b == 0)
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d101      	bne.n	80002f2 <evaluate+0x13e>
			return 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e01a      	b.n	8000328 <evaluate+0x174>
		*result=a/b;
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	601a      	str	r2, [r3, #0]
		break;
 80002fe:	e012      	b.n	8000326 <evaluate+0x172>
	
	case NEG:
		if(evaluate(eq->lNode, &b))
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f107 0208 	add.w	r2, r7, #8
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff52 	bl	80001b4 <evaluate>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <evaluate+0x166>
			return 1;
 8000316:	2301      	movs	r3, #1
 8000318:	e006      	b.n	8000328 <evaluate+0x174>
		*result=-a;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	425a      	negs	r2, r3
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	601a      	str	r2, [r3, #0]
		break;
 8000322:	e000      	b.n	8000326 <evaluate+0x172>
	
	default:
		break;
 8000324:	bf00      	nop
	}
	return 0;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <pasteToExpression>:
void pasteToExpression(uint8_t *expression, uint8_t *filled, uint8_t exprWidth, uint32_t value) {
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	4613      	mov	r3, r2
 800033e:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	75fb      	strb	r3, [r7, #23]
	while(value && i < exprWidth) {
 8000344:	e019      	b.n	800037a <pasteToExpression+0x4a>
		expression[i] = value%10+48;
 8000346:	6839      	ldr	r1, [r7, #0]
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <pasteToExpression+0xd4>)
 800034a:	fba3 2301 	umull	r2, r3, r3, r1
 800034e:	08da      	lsrs	r2, r3, #3
 8000350:	4613      	mov	r3, r2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	4413      	add	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	1aca      	subs	r2, r1, r3
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	7dfb      	ldrb	r3, [r7, #23]
 800035e:	68f9      	ldr	r1, [r7, #12]
 8000360:	440b      	add	r3, r1
 8000362:	3230      	adds	r2, #48	; 0x30
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	701a      	strb	r2, [r3, #0]
		value/=10;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <pasteToExpression+0xd4>)
 800036c:	fba2 2303 	umull	r2, r3, r2, r3
 8000370:	08db      	lsrs	r3, r3, #3
 8000372:	603b      	str	r3, [r7, #0]
		++i;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
 8000376:	3301      	adds	r3, #1
 8000378:	75fb      	strb	r3, [r7, #23]
	while(value && i < exprWidth) {
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d003      	beq.n	8000388 <pasteToExpression+0x58>
 8000380:	7dfa      	ldrb	r2, [r7, #23]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	429a      	cmp	r2, r3
 8000386:	d3de      	bcc.n	8000346 <pasteToExpression+0x16>
	}
	for (uint8_t k = i; k < exprWidth; ++k) {
 8000388:	7dfb      	ldrb	r3, [r7, #23]
 800038a:	75bb      	strb	r3, [r7, #22]
 800038c:	e007      	b.n	800039e <pasteToExpression+0x6e>
		expression[k] = ' ';
 800038e:	7dbb      	ldrb	r3, [r7, #22]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	4413      	add	r3, r2
 8000394:	2220      	movs	r2, #32
 8000396:	701a      	strb	r2, [r3, #0]
	for (uint8_t k = i; k < exprWidth; ++k) {
 8000398:	7dbb      	ldrb	r3, [r7, #22]
 800039a:	3301      	adds	r3, #1
 800039c:	75bb      	strb	r3, [r7, #22]
 800039e:	7dba      	ldrb	r2, [r7, #22]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d3f3      	bcc.n	800038e <pasteToExpression+0x5e>
	}
	for(uint8_t j = 0; j < i/2; ++j) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	757b      	strb	r3, [r7, #21]
 80003aa:	e01c      	b.n	80003e6 <pasteToExpression+0xb6>
		uint8_t a = expression[j];
 80003ac:	7d7b      	ldrb	r3, [r7, #21]
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	753b      	strb	r3, [r7, #20]
		expression[j] = expression[i-1-j];
 80003b6:	7dfb      	ldrb	r3, [r7, #23]
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	7d7b      	ldrb	r3, [r7, #21]
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	441a      	add	r2, r3
 80003c4:	7d7b      	ldrb	r3, [r7, #21]
 80003c6:	68f9      	ldr	r1, [r7, #12]
 80003c8:	440b      	add	r3, r1
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	701a      	strb	r2, [r3, #0]
		expression[i-1-j] = a;
 80003ce:	7dfb      	ldrb	r3, [r7, #23]
 80003d0:	1e5a      	subs	r2, r3, #1
 80003d2:	7d7b      	ldrb	r3, [r7, #21]
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	4413      	add	r3, r2
 80003dc:	7d3a      	ldrb	r2, [r7, #20]
 80003de:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < i/2; ++j) {
 80003e0:	7d7b      	ldrb	r3, [r7, #21]
 80003e2:	3301      	adds	r3, #1
 80003e4:	757b      	strb	r3, [r7, #21]
 80003e6:	7dfb      	ldrb	r3, [r7, #23]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	7d7a      	ldrb	r2, [r7, #21]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d3dc      	bcc.n	80003ac <pasteToExpression+0x7c>
	}
	*filled = i;
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	7dfa      	ldrb	r2, [r7, #23]
 80003f6:	701a      	strb	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	371c      	adds	r7, #28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	cccccccd 	.word	0xcccccccd

08000408 <pasteErrorToExpression>:

void pasteErrorToExpression(uint8_t *expression, uint8_t *filled, uint8_t exprWidth, uint8_t error) {
 8000408:	b480      	push	{r7}
 800040a:	b087      	sub	sp, #28
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	4611      	mov	r1, r2
 8000414:	461a      	mov	r2, r3
 8000416:	460b      	mov	r3, r1
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	4613      	mov	r3, r2
 800041c:	71bb      	strb	r3, [r7, #6]
	if(error == 0) {
 800041e:	79bb      	ldrb	r3, [r7, #6]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d131      	bne.n	8000488 <pasteErrorToExpression+0x80>
		expression[0] = 'P';
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	2250      	movs	r2, #80	; 0x50
 8000428:	701a      	strb	r2, [r3, #0]
		expression[1] = 'A';
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	2241      	movs	r2, #65	; 0x41
 8000430:	701a      	strb	r2, [r3, #0]
		expression[2] = 'R';
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3302      	adds	r3, #2
 8000436:	2252      	movs	r2, #82	; 0x52
 8000438:	701a      	strb	r2, [r3, #0]
		expression[3] = 'S';
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3303      	adds	r3, #3
 800043e:	2253      	movs	r2, #83	; 0x53
 8000440:	701a      	strb	r2, [r3, #0]
		expression[4] = 'E';
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3304      	adds	r3, #4
 8000446:	2245      	movs	r2, #69	; 0x45
 8000448:	701a      	strb	r2, [r3, #0]
		expression[5] = 'E';
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3305      	adds	r3, #5
 800044e:	2245      	movs	r2, #69	; 0x45
 8000450:	701a      	strb	r2, [r3, #0]
		expression[6] = 'R';
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3306      	adds	r3, #6
 8000456:	2252      	movs	r2, #82	; 0x52
 8000458:	701a      	strb	r2, [r3, #0]
		expression[7] = 'R';
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3307      	adds	r3, #7
 800045e:	2252      	movs	r2, #82	; 0x52
 8000460:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 8; i < exprWidth; ++i)
 8000462:	2308      	movs	r3, #8
 8000464:	75fb      	strb	r3, [r7, #23]
 8000466:	e007      	b.n	8000478 <pasteErrorToExpression+0x70>
			expression[i] = ' ';
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	4413      	add	r3, r2
 800046e:	2220      	movs	r2, #32
 8000470:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 8; i < exprWidth; ++i)
 8000472:	7dfb      	ldrb	r3, [r7, #23]
 8000474:	3301      	adds	r3, #1
 8000476:	75fb      	strb	r3, [r7, #23]
 8000478:	7dfa      	ldrb	r2, [r7, #23]
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	429a      	cmp	r2, r3
 800047e:	d3f3      	bcc.n	8000468 <pasteErrorToExpression+0x60>
		*filled = 8;
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2208      	movs	r2, #8
 8000484:	701a      	strb	r2, [r3, #0]
		expression[5] = '0';
		for(uint8_t i = 6; i < exprWidth; ++i)
			expression[i] = ' ';
		*filled = 6;
	}
}
 8000486:	e02b      	b.n	80004e0 <pasteErrorToExpression+0xd8>
	else if(error == 1) {
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d128      	bne.n	80004e0 <pasteErrorToExpression+0xd8>
		expression[0] = 'D';
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2244      	movs	r2, #68	; 0x44
 8000492:	701a      	strb	r2, [r3, #0]
		expression[1] = 'I';
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	2249      	movs	r2, #73	; 0x49
 800049a:	701a      	strb	r2, [r3, #0]
		expression[2] = 'V';
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3302      	adds	r3, #2
 80004a0:	2256      	movs	r2, #86	; 0x56
 80004a2:	701a      	strb	r2, [r3, #0]
		expression[3] = 'B';
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3303      	adds	r3, #3
 80004a8:	2242      	movs	r2, #66	; 0x42
 80004aa:	701a      	strb	r2, [r3, #0]
		expression[4] = 'Y';
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3304      	adds	r3, #4
 80004b0:	2259      	movs	r2, #89	; 0x59
 80004b2:	701a      	strb	r2, [r3, #0]
		expression[5] = '0';
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3305      	adds	r3, #5
 80004b8:	2230      	movs	r2, #48	; 0x30
 80004ba:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 6; i < exprWidth; ++i)
 80004bc:	2306      	movs	r3, #6
 80004be:	75bb      	strb	r3, [r7, #22]
 80004c0:	e007      	b.n	80004d2 <pasteErrorToExpression+0xca>
			expression[i] = ' ';
 80004c2:	7dbb      	ldrb	r3, [r7, #22]
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	2220      	movs	r2, #32
 80004ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 6; i < exprWidth; ++i)
 80004cc:	7dbb      	ldrb	r3, [r7, #22]
 80004ce:	3301      	adds	r3, #1
 80004d0:	75bb      	strb	r3, [r7, #22]
 80004d2:	7dba      	ldrb	r2, [r7, #22]
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d3f3      	bcc.n	80004c2 <pasteErrorToExpression+0xba>
		*filled = 6;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	2206      	movs	r2, #6
 80004de:	701a      	strb	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	371c      	adds	r7, #28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <parseE>:

struct Node *parseE(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b08c      	sub	sp, #48	; 0x30
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	460b      	mov	r3, r1
 80004f8:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 80004fa:	7af9      	ldrb	r1, [r7, #11]
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f000 f84e 	bl	80005a2 <parseT>
 8000506:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	2b00      	cmp	r3, #0
 800050c:	d13a      	bne.n	8000584 <parseE+0x9a>
		return NULL;
 800050e:	2300      	movs	r3, #0
 8000510:	e043      	b.n	800059a <parseE+0xb0>
		
	uint8_t tokentype;
	uint32_t tokenVal;

	while(!lastToken(filled, *nextTokenEnd)) {
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	f107 001b 	add.w	r0, r7, #27
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	4603      	mov	r3, r0
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f000 f95f 	bl	80007ea <getToken>
		if(tokentype == 0) {
 800052c:	7efb      	ldrb	r3, [r7, #27]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d101      	bne.n	8000536 <parseE+0x4c>
			return NULL;
 8000532:	2300      	movs	r3, #0
 8000534:	e031      	b.n	800059a <parseE+0xb0>
		}
		if(tokenVal == '+' || tokenVal == '-') {
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b2b      	cmp	r3, #43	; 0x2b
 800053a:	d002      	beq.n	8000542 <parseE+0x58>
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	2b2d      	cmp	r3, #45	; 0x2d
 8000540:	d12a      	bne.n	8000598 <parseE+0xae>
			struct Node *f2 = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 8000542:	7af9      	ldrb	r1, [r7, #11]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f000 f82a 	bl	80005a2 <parseT>
 800054e:	6238      	str	r0, [r7, #32]
			if(f2 == NULL)
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d101      	bne.n	800055a <parseE+0x70>
				return NULL;
 8000556:	2300      	movs	r3, #0
 8000558:	e01f      	b.n	800059a <parseE+0xb0>
			struct Node *ret = malloc(sizeof(struct Node));
 800055a:	2010      	movs	r0, #16
 800055c:	f002 fbae 	bl	8002cbc <malloc>
 8000560:	4603      	mov	r3, r0
 8000562:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='+' ? ADD : SUB;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	2b2b      	cmp	r3, #43	; 0x2b
 8000568:	d101      	bne.n	800056e <parseE+0x84>
 800056a:	2201      	movs	r2, #1
 800056c:	e000      	b.n	8000570 <parseE+0x86>
 800056e:	2202      	movs	r2, #2
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000578:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	6a3a      	ldr	r2, [r7, #32]
 800057e:	60da      	str	r2, [r3, #12]
			f = ret;
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
	while(!lastToken(filled, *nextTokenEnd)) {
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	7afb      	ldrb	r3, [r7, #11]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f918 	bl	80007c2 <lastToken>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0bc      	beq.n	8000512 <parseE+0x28>
		else {
			//return NULL;
			break;
		}
	}
	return f;
 8000598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800059a:	4618      	mov	r0, r3
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <parseT>:

// Assume there is T to parse in the expression
// If not, return NULL
//
// If there is one additional char, there is no error
struct Node *parseT(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b08c      	sub	sp, #48	; 0x30
 80005a6:	af02      	add	r7, sp, #8
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	460b      	mov	r3, r1
 80005b0:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80005b2:	7af9      	ldrb	r1, [r7, #11]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f000 f84d 	bl	8000658 <parseF>
 80005be:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d13a      	bne.n	800063c <parseT+0x9a>
		return NULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e042      	b.n	8000650 <parseT+0xae>
	
	uint8_t tokentype;
	uint32_t tokenVal;

	while(!nextToken(expression, filled, nextTokenBegin, nextTokenEnd)) {
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	f107 001b 	add.w	r0, r7, #27
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	4603      	mov	r3, r0
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f000 f903 	bl	80007ea <getToken>
		if(tokentype == 0) {
 80005e4:	7efb      	ldrb	r3, [r7, #27]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <parseT+0x4c>
			return NULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e030      	b.n	8000650 <parseT+0xae>
		}
		if(tokenVal == '*' || tokenVal == '/') {
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b2a      	cmp	r3, #42	; 0x2a
 80005f2:	d002      	beq.n	80005fa <parseT+0x58>
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2b2f      	cmp	r3, #47	; 0x2f
 80005f8:	d129      	bne.n	800064e <parseT+0xac>
			struct Node *f2 = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80005fa:	7af9      	ldrb	r1, [r7, #11]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 f829 	bl	8000658 <parseF>
 8000606:	6238      	str	r0, [r7, #32]
			if(f2 == NULL)
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <parseT+0x70>
				return NULL;
 800060e:	2300      	movs	r3, #0
 8000610:	e01e      	b.n	8000650 <parseT+0xae>
			struct Node *ret = malloc(sizeof(struct Node));
 8000612:	2010      	movs	r0, #16
 8000614:	f002 fb52 	bl	8002cbc <malloc>
 8000618:	4603      	mov	r3, r0
 800061a:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='*' ? MULT : DIV;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b2a      	cmp	r3, #42	; 0x2a
 8000620:	d101      	bne.n	8000626 <parseT+0x84>
 8000622:	2203      	movs	r2, #3
 8000624:	e000      	b.n	8000628 <parseT+0x86>
 8000626:	2204      	movs	r2, #4
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000630:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	6a3a      	ldr	r2, [r7, #32]
 8000636:	60da      	str	r2, [r3, #12]
			f = ret;
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
	while(!nextToken(expression, filled, nextTokenBegin, nextTokenEnd)) {
 800063c:	7af9      	ldrb	r1, [r7, #11]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 f87a 	bl	800073c <nextToken>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0bd      	beq.n	80005ca <parseT+0x28>
		else {
			//return NULL;
			break;
		}
	}
	return f;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8000650:	4618      	mov	r0, r3
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <parseF>:
// It should parse factor as much as it can
// expression length >= 0
// filled is in [0, expression length]
// *nextTokenBegin is in [0, filled-1]
// *nextTokenBegin is in [0, filled]
struct Node *parseF(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af02      	add	r7, sp, #8
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	460b      	mov	r3, r1
 8000666:	72fb      	strb	r3, [r7, #11]
	if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))// this should be called by parseT
 8000668:	7af9      	ldrb	r1, [r7, #11]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f000 f864 	bl	800073c <nextToken>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <parseF+0x26>
		return NULL;
 800067a:	2300      	movs	r3, #0
 800067c:	e05a      	b.n	8000734 <parseF+0xdc>
	uint8_t tokentype;
	uint32_t tokenVal;
	getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	f107 0017 	add.w	r0, r7, #23
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4603      	mov	r3, r0
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 f8a9 	bl	80007ea <getToken>
	if(tokentype == 0) {
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10c      	bne.n	80006b8 <parseF+0x60>
		struct Node *ret = malloc(sizeof(struct Node));
 800069e:	2010      	movs	r0, #16
 80006a0:	f002 fb0c 	bl	8002cbc <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	61bb      	str	r3, [r7, #24]
		ret->type = NUMBER;
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
		ret->value = tokenVal;
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	605a      	str	r2, [r3, #4]
		return ret;
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	e03d      	b.n	8000734 <parseF+0xdc>
	}
	else if(tokenVal == '(') {
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	2b28      	cmp	r3, #40	; 0x28
 80006bc:	d11d      	bne.n	80006fa <parseF+0xa2>
		struct Node *r = parseE(expression, filled, nextTokenBegin, nextTokenEnd);
 80006be:	7af9      	ldrb	r1, [r7, #11]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff ff10 	bl	80004ea <parseE>
 80006ca:	61f8      	str	r0, [r7, #28]
		//if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))
		//	return NULL;
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	f107 0017 	add.w	r0, r7, #23
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	4603      	mov	r3, r0
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f000 f882 	bl	80007ea <getToken>
		if(tokentype == 1 && tokenVal == ')')
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d104      	bne.n	80006f6 <parseF+0x9e>
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	2b29      	cmp	r3, #41	; 0x29
 80006f0:	d101      	bne.n	80006f6 <parseF+0x9e>
			return r;
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	e01e      	b.n	8000734 <parseF+0xdc>
		else 
			return NULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e01c      	b.n	8000734 <parseF+0xdc>
	}
	else if(tokenVal == '-') {
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b2d      	cmp	r3, #45	; 0x2d
 80006fe:	d118      	bne.n	8000732 <parseF+0xda>
		struct Node *r = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 8000700:	7af9      	ldrb	r1, [r7, #11]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ffa6 	bl	8000658 <parseF>
 800070c:	6278      	str	r0, [r7, #36]	; 0x24
		if(r == NULL)
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <parseF+0xc0>
			return NULL;
 8000714:	2300      	movs	r3, #0
 8000716:	e00d      	b.n	8000734 <parseF+0xdc>
		struct Node *ret = malloc(sizeof(struct Node));
 8000718:	2010      	movs	r0, #16
 800071a:	f002 facf 	bl	8002cbc <malloc>
 800071e:	4603      	mov	r3, r0
 8000720:	623b      	str	r3, [r7, #32]
		ret->type = NEG;
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	2205      	movs	r2, #5
 8000726:	701a      	strb	r2, [r3, #0]
		ret->lNode = r;
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072c:	609a      	str	r2, [r3, #8]
		return ret;
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	e000      	b.n	8000734 <parseF+0xdc>
	}
	else {
		return NULL;
 8000732:	2300      	movs	r3, #0
	}
}
 8000734:	4618      	mov	r0, r3
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <nextToken>:
// filled is in [0, expression length]
// *nextTokenBegin is in [0, filled-1] - not important
// *nextTokenBegin is in [0, filled]
// returns 1 when no more tokens
// return 0 when got a token
uint8_t nextToken(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	460b      	mov	r3, r1
 800074a:	72fb      	strb	r3, [r7, #11]
	if(*nextTokenEnd >= filled) 
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	7afa      	ldrb	r2, [r7, #11]
 8000752:	429a      	cmp	r2, r3
 8000754:	d801      	bhi.n	800075a <nextToken+0x1e>
		return 1;
 8000756:	2301      	movs	r3, #1
 8000758:	e02f      	b.n	80007ba <nextToken+0x7e>
	*nextTokenBegin=*nextTokenEnd;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	701a      	strb	r2, [r3, #0]
	if(isNum(expression[*nextTokenBegin])) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f88b 	bl	800088a <isNum>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d018      	beq.n	80007ac <nextToken+0x70>
		while(++(*nextTokenEnd) < filled && isNum(expression[*nextTokenEnd]));
 800077a:	bf00      	nop
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	7afa      	ldrb	r2, [r7, #11]
 800078e:	429a      	cmp	r2, r3
 8000790:	d912      	bls.n	80007b8 <nextToken+0x7c>
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f873 	bl	800088a <isNum>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1e8      	bne.n	800077c <nextToken+0x40>
 80007aa:	e005      	b.n	80007b8 <nextToken+0x7c>
	}
	else {
		++(*nextTokenEnd);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <lastToken>:

uint8_t lastToken(uint8_t filled, uint8_t nextTokenEnd) {
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	460a      	mov	r2, r1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	4613      	mov	r3, r2
 80007d0:	71bb      	strb	r3, [r7, #6]
	return nextTokenEnd >= filled;
 80007d2:	79ba      	ldrb	r2, [r7, #6]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	bf2c      	ite	cs
 80007da:	2301      	movcs	r3, #1
 80007dc:	2300      	movcc	r3, #0
 80007de:	b2db      	uxtb	r3, r3
};
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <getToken>:

uint8_t getToken(uint8_t *expression, uint8_t nextTokenBegin, uint8_t nextTokenEnd, uint8_t *tokenType, uint32_t *tokenVal) {
 80007ea:	b480      	push	{r7}
 80007ec:	b087      	sub	sp, #28
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	72fb      	strb	r3, [r7, #11]
 80007f8:	4613      	mov	r3, r2
 80007fa:	72bb      	strb	r3, [r7, #10]
	if(expression[nextTokenBegin] >= '0' && expression[nextTokenBegin] <= '9') {
 80007fc:	7afb      	ldrb	r3, [r7, #11]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b2f      	cmp	r3, #47	; 0x2f
 8000806:	d930      	bls.n	800086a <getToken+0x80>
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b39      	cmp	r3, #57	; 0x39
 8000812:	d82a      	bhi.n	800086a <getToken+0x80>
		*tokenType = 0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin]-48;
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3b30      	subs	r3, #48	; 0x30
 8000824:	461a      	mov	r2, r3
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	3301      	adds	r3, #1
 800082e:	75fb      	strb	r3, [r7, #23]
 8000830:	e016      	b.n	8000860 <getToken+0x76>
			*tokenVal *= 10;
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	461a      	mov	r2, r3
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	601a      	str	r2, [r3, #0]
			*tokenVal += expression[i]-48;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	68f9      	ldr	r1, [r7, #12]
 800084c:	440a      	add	r2, r1
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	4413      	add	r3, r2
 8000852:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000856:	6a3b      	ldr	r3, [r7, #32]
 8000858:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 800085a:	7dfb      	ldrb	r3, [r7, #23]
 800085c:	3301      	adds	r3, #1
 800085e:	75fb      	strb	r3, [r7, #23]
 8000860:	7dfa      	ldrb	r2, [r7, #23]
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	429a      	cmp	r2, r3
 8000866:	d3e4      	bcc.n	8000832 <getToken+0x48>
 8000868:	e009      	b.n	800087e <getToken+0x94>
		}
	}
	else {
		*tokenType = 1;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin];
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	601a      	str	r2, [r3, #0]
	}
}
 800087e:	bf00      	nop
 8000880:	4618      	mov	r0, r3
 8000882:	371c      	adds	r7, #28
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <isNum>:

uint8_t isNum(uint8_t ch) {
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
	return ch >= '0' && ch <= '9';
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b2f      	cmp	r3, #47	; 0x2f
 8000898:	d904      	bls.n	80008a4 <isNum+0x1a>
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b39      	cmp	r3, #57	; 0x39
 800089e:	d801      	bhi.n	80008a4 <isNum+0x1a>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <isNum+0x1c>
 80008a4:	2300      	movs	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <drawExpression>:

#include "gui.h"

#include "lcddisplay.h"

void drawExpression(uint8_t *expression, uint8_t cursor, uint8_t shift, uint8_t filled, uint8_t exprwidth, uint8_t screenwidth) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	4608      	mov	r0, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	461a      	mov	r2, r3
 80008c0:	4603      	mov	r3, r0
 80008c2:	70fb      	strb	r3, [r7, #3]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70bb      	strb	r3, [r7, #2]
 80008c8:	4613      	mov	r3, r2
 80008ca:	707b      	strb	r3, [r7, #1]
	LCDsetCursorPos(0, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f9dd 	bl	8000c8e <LCDsetCursorPos>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 80008d4:	78bb      	ldrb	r3, [r7, #2]
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e011      	b.n	80008fe <drawExpression+0x4c>
	  if(i < exprwidth)
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	7e3b      	ldrb	r3, [r7, #24]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d207      	bcs.n	80008f2 <drawExpression+0x40>
		  LCDwrite(expression[i]);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f9c0 	bl	8000c70 <LCDwrite>
 80008f0:	e002      	b.n	80008f8 <drawExpression+0x46>
	  else
		  LCDwrite(' ');
 80008f2:	2020      	movs	r0, #32
 80008f4:	f000 f9bc 	bl	8000c70 <LCDwrite>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	78b9      	ldrb	r1, [r7, #2]
 8000902:	7f3b      	ldrb	r3, [r7, #28]
 8000904:	440b      	add	r3, r1
 8000906:	429a      	cmp	r2, r3
 8000908:	dbe7      	blt.n	80008da <drawExpression+0x28>
	}
	LCDsetCursorPos(0, cursor-shift);
 800090a:	78fa      	ldrb	r2, [r7, #3]
 800090c:	78bb      	ldrb	r3, [r7, #2]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f000 f9ba 	bl	8000c8e <LCDsetCursorPos>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <drawMenu>:

void drawMenu(uint8_t page, uint8_t screenwidth, uint8_t (*pages)[3], uint8_t numofpages, uint8_t cursorScreen) {
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	603a      	str	r2, [r7, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	460b      	mov	r3, r1
 8000932:	71bb      	strb	r3, [r7, #6]
 8000934:	4613      	mov	r3, r2
 8000936:	717b      	strb	r3, [r7, #5]
	LCDsetCursorPos(1, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2001      	movs	r0, #1
 800093c:	f000 f9a7 	bl	8000c8e <LCDsetCursorPos>
	//uint8_t *t = "Page ";
	//LCDwriteText(t);
	LCDwrite(page + 48);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3330      	adds	r3, #48	; 0x30
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f992 	bl	8000c70 <LCDwrite>
	LCDwrite(' ');
 800094c:	2020      	movs	r0, #32
 800094e:	f000 f98f 	bl	8000c70 <LCDwrite>
	LCDwrite(pages[page][0]);
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f985 	bl	8000c70 <LCDwrite>
	LCDwrite(' ');
 8000966:	2020      	movs	r0, #32
 8000968:	f000 f982 	bl	8000c70 <LCDwrite>
	LCDwrite(pages[page][1]);
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	4413      	add	r3, r2
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f978 	bl	8000c70 <LCDwrite>
	LCDwrite(' ');
 8000980:	2020      	movs	r0, #32
 8000982:	f000 f975 	bl	8000c70 <LCDwrite>
	LCDwrite(pages[page][2]);
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	4413      	add	r3, r2
 8000992:	789b      	ldrb	r3, [r3, #2]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f96b 	bl	8000c70 <LCDwrite>
	LCDsetCursorPos(0, cursorScreen);
 800099a:	7c3b      	ldrb	r3, [r7, #16]
 800099c:	4619      	mov	r1, r3
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f975 	bl	8000c8e <LCDsetCursorPos>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <addChar>:

void addChar(uint8_t *expression, uint8_t (*pages)[3], uint8_t page, uint8_t button, uint8_t *cursor, uint8_t *shift, uint8_t *filled, uint8_t exprwidth, uint8_t screenwidth) {
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	4611      	mov	r1, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	460b      	mov	r3, r1
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	4613      	mov	r3, r2
 80009c0:	71bb      	strb	r3, [r7, #6]
	if(*filled >= exprwidth)
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d93f      	bls.n	8000a4e <addChar+0xa2>
		return;
	for(uint8_t i = *filled; i > *cursor; --i) {
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	e00b      	b.n	80009ee <addChar+0x42>
		expression[i] = expression[i-1];
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	3b01      	subs	r3, #1
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	441a      	add	r2, r3
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	440b      	add	r3, r1
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = *filled; i > *cursor; --i) {
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	75fb      	strb	r3, [r7, #23]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	7dfa      	ldrb	r2, [r7, #23]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8ee      	bhi.n	80009d6 <addChar+0x2a>
	}
	expression[*cursor] = pages[page][button];
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	79ba      	ldrb	r2, [r7, #6]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4403      	add	r3, r0
 8000a10:	5c8a      	ldrb	r2, [r1, r2]
 8000a12:	701a      	strb	r2, [r3, #0]
	++(*filled);
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	701a      	strb	r2, [r3, #0]
	++(*cursor);
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a36:	4413      	add	r3, r2
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	dc07      	bgt.n	8000a50 <addChar+0xa4>
		++(*shift);
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e000      	b.n	8000a50 <addChar+0xa4>
		return;
 8000a4e:	bf00      	nop
}
 8000a50:	371c      	adds	r7, #28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <moveLeft>:

void moveLeft(uint8_t filled, uint8_t *cursor, uint8_t *shift) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	73fb      	strb	r3, [r7, #15]
	if(*cursor > 0)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d005      	beq.n	8000a7a <moveLeft+0x22>
		--(*cursor);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	701a      	strb	r2, [r3, #0]
	if(*shift > *cursor)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d905      	bls.n	8000a92 <moveLeft+0x3a>
		--(*shift);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	701a      	strb	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <moveRight>:

void moveRight(uint8_t filled, uint8_t *cursor, uint8_t *shift, uint8_t screenwidth) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	4613      	mov	r3, r2
 8000aae:	73bb      	strb	r3, [r7, #14]
	if(*cursor < filled)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d905      	bls.n	8000ac6 <moveRight+0x2a>
		++(*cursor);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	4413      	add	r3, r2
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	dc05      	bgt.n	8000ae4 <moveRight+0x48>
		++(*shift);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <nextPage>:

void nextPage(uint8_t *page, uint8_t numofpages) {
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	70fb      	strb	r3, [r7, #3]
	++(*page);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	701a      	strb	r2, [r3, #0]
	(*page)%=numofpages;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	78fa      	ldrb	r2, [r7, #3]
 8000b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b10:	fb01 f202 	mul.w	r2, r1, r2
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	701a      	strb	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
	...

08000b28 <LCDsend_>:
#include "stm32f1xx_hal.h"

#include "lcddisplay.h"

// Should add 100us delay right after control byte and right after data byte
void LCDsend_(uint8_t control, uint8_t data, uint8_t delay) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	460b      	mov	r3, r1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	4613      	mov	r3, r2
 8000b38:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	733b      	strb	r3, [r7, #12]
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDADDR<<1, toSend, 2, HAL_MAX_DELAY);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <LCDsend_+0x40>)
 8000b44:	6818      	ldr	r0, [r3, #0]
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2302      	movs	r3, #2
 8000b52:	217c      	movs	r1, #124	; 0x7c
 8000b54:	f001 f95e 	bl	8001e14 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fd1e 	bl	800159c <HAL_Delay>
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <LCDBacklightsend_>:

// Maybe rewrite using one function
void LCDBacklightsend_(uint8_t control, uint8_t data, uint8_t delay) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	733b      	strb	r3, [r7, #12]
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDBACKLIGHTADDR<<1, toSend, 2, HAL_MAX_DELAY);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LCDBacklightsend_+0x40>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2302      	movs	r3, #2
 8000b96:	21d6      	movs	r1, #214	; 0xd6
 8000b98:	f001 f93c 	bl	8001e14 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fcfc 	bl	800159c <HAL_Delay>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000008c 	.word	0x2000008c

08000bb0 <LCDinit>:

void LCDinit(I2C_HandleTypeDef *hi2c1Ptr__) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	hi2c1Ptr_ = hi2c1Ptr__;
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <LCDinit+0xb0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]

	LCDdisplayOn_ = 1;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <LCDinit+0xb4>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	LCDcursorOn_ = 0;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <LCDinit+0xb8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
	LCDblinkOn_ = 0;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <LCDinit+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

	HAL_Delay(50);
 8000bd0:	2032      	movs	r0, #50	; 0x32
 8000bd2:	f000 fce3 	bl	800159c <HAL_Delay>
	LCDsend_(COMMAND, 0x28, 5);
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	2128      	movs	r1, #40	; 0x28
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	f7ff ffa4 	bl	8000b28 <LCDsend_>
	LCDsend_(COMMAND, 0x0C, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	210c      	movs	r1, #12
 8000be4:	2080      	movs	r0, #128	; 0x80
 8000be6:	f7ff ff9f 	bl	8000b28 <LCDsend_>
	LCDsend_(COMMAND, 0x01, 2);
 8000bea:	2202      	movs	r2, #2
 8000bec:	2101      	movs	r1, #1
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	f7ff ff9a 	bl	8000b28 <LCDsend_>
	LCDsend_(COMMAND, 0x06, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	2080      	movs	r0, #128	; 0x80
 8000bfa:	f7ff ff95 	bl	8000b28 <LCDsend_>

	LCDBacklightsend_(0x2F, 0x00, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	202f      	movs	r0, #47	; 0x2f
 8000c04:	f7ff ffb2 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x00, 0x20, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff ffad 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x01, 0x00, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ffa8 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x02, 0x01, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff ffa3 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x03, 4, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2104      	movs	r1, #4
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f7ff ff9e 	bl	8000b6c <LCDBacklightsend_>

	LCDBacklightsend_(0x06, 255, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	21ff      	movs	r1, #255	; 0xff
 8000c34:	2006      	movs	r0, #6
 8000c36:	f7ff ff99 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x05, 255, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	21ff      	movs	r1, #255	; 0xff
 8000c3e:	2005      	movs	r0, #5
 8000c40:	f7ff ff94 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x04, 255, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	2004      	movs	r0, #4
 8000c4a:	f7ff ff8f 	bl	8000b6c <LCDBacklightsend_>
	LCDBacklightsend_(0x07, 0xFF, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	21ff      	movs	r1, #255	; 0xff
 8000c52:	2007      	movs	r0, #7
 8000c54:	f7ff ff8a 	bl	8000b6c <LCDBacklightsend_>

}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	20000090 	.word	0x20000090
 8000c68:	20000091 	.word	0x20000091
 8000c6c:	20000092 	.word	0x20000092

08000c70 <LCDwrite>:

void LCDwrite(uint8_t ch) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	LCDsend_(DATA, ch, 1);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	f7ff ff51 	bl	8000b28 <LCDsend_>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <LCDsetCursorPos>:

void LCDwriteText(uint8_t *text) {
	while(*text != '\0') LCDwrite(*text++);
}

void LCDsetCursorPos(uint8_t row, uint8_t col) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	460a      	mov	r2, r1
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	71bb      	strb	r3, [r7, #6]
	LCDsend_(COMMAND, 0x80 | col | (row==0 ? 0x00 : 0x40), 1);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <LCDsetCursorPos+0x1a>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e000      	b.n	8000caa <LCDsetCursorPos+0x1c>
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2080      	movs	r0, #128	; 0x80
 8000cbc:	f7ff ff34 	bl	8000b28 <LCDsend_>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LCDsetCursor>:

void LCDsetDisplay(uint8_t isOn) {
	LCDdisplayOn_ = isOn;
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
}
void LCDsetCursor(uint8_t isOn) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	LCDcursorOn_ = isOn;
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <LCDsetCursor+0x48>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <LCDsetCursor+0x4c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	b25a      	sxtb	r2, r3
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <LCDsetCursor+0x48>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <LCDsetCursor+0x50>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	2080      	movs	r0, #128	; 0x80
 8000d04:	f7ff ff10 	bl	8000b28 <LCDsend_>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000091 	.word	0x20000091
 8000d14:	20000090 	.word	0x20000090
 8000d18:	20000092 	.word	0x20000092

08000d1c <LCDsetBlink>:
void LCDsetBlink(uint8_t isOn) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	LCDblinkOn_ = isOn;
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <LCDsetBlink+0x48>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <LCDsetBlink+0x4c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	b25a      	sxtb	r2, r3
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <LCDsetBlink+0x50>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LCDsetBlink+0x48>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2201      	movs	r2, #1
 8000d54:	4619      	mov	r1, r3
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	f7ff fee6 	bl	8000b28 <LCDsend_>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000092 	.word	0x20000092
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	20000091 	.word	0x20000091

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f000 fbaf 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f875 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 f8dd 	bl	8000f3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d82:	f000 f8ad 	bl	8000ee0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //stm32f103c6t6a

  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e006      	b.n	8000d9a <main+0x2a>
	  expression[i] = ' ';
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <main+0xd0>)
 8000d90:	2120      	movs	r1, #32
 8000d92:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	3301      	adds	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	d9f5      	bls.n	8000d8c <main+0x1c>

  /*expression[0] = 'a';
  expression[1] = 'b';*/
  cursor = 0;
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <main+0xd4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
  filled = 0;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <main+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
  shift = 0;
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <main+0xdc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]

  buttonbeingpressed = 0;
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <main+0xe0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

  LCDinit(&hi2c1);
 8000db8:	4826      	ldr	r0, [pc, #152]	; (8000e54 <main+0xe4>)
 8000dba:	f7ff fef9 	bl	8000bb0 <LCDinit>
  LCDwrite('s');
 8000dbe:	2073      	movs	r0, #115	; 0x73
 8000dc0:	f7ff ff56 	bl	8000c70 <LCDwrite>
  LCDwrite('t');
 8000dc4:	2074      	movs	r0, #116	; 0x74
 8000dc6:	f7ff ff53 	bl	8000c70 <LCDwrite>
  LCDsetCursorPos(0, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff5e 	bl	8000c8e <LCDsetCursorPos>
  LCDsetCursor(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff ff78 	bl	8000cc8 <LCDsetCursor>
  LCDsetBlink(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff9f 	bl	8000d1c <LCDsetBlink>
  redraw = 1;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <main+0xe8>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
  redrawmenu = 1;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <main+0xec>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(redraw) {
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <main+0xe8>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00f      	beq.n	8000e12 <main+0xa2>
		redraw = 0;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <main+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
		drawExpression(expression, cursor, shift, filled, EXPRWIDTH, SCREENWIDTH);
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <main+0xd4>)
 8000dfa:	7819      	ldrb	r1, [r3, #0]
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <main+0xdc>)
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <main+0xd8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2010      	movs	r0, #16
 8000e06:	9001      	str	r0, [sp, #4]
 8000e08:	2020      	movs	r0, #32
 8000e0a:	9000      	str	r0, [sp, #0]
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <main+0xd0>)
 8000e0e:	f7ff fd50 	bl	80008b2 <drawExpression>
	}
	if(redrawmenu) {
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <main+0xec>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0e7      	beq.n	8000dea <main+0x7a>
		redrawmenu = 0;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <main+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
		drawMenu(page, SCREENWIDTH, pages, NUMOFPAGES, cursor-shift);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <main+0xf0>)
 8000e22:	7818      	ldrb	r0, [r3, #0]
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <main+0xd4>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <main+0xdc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2306      	movs	r3, #6
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <main+0xf4>)
 8000e36:	2110      	movs	r1, #16
 8000e38:	f7ff fd73 	bl	8000922 <drawMenu>
	if(redraw) {
 8000e3c:	e7d5      	b.n	8000dea <main+0x7a>
 8000e3e:	bf00      	nop
 8000e40:	200000ec 	.word	0x200000ec
 8000e44:	2000010c 	.word	0x2000010c
 8000e48:	2000010e 	.word	0x2000010e
 8000e4c:	2000010d 	.word	0x2000010d
 8000e50:	20000111 	.word	0x20000111
 8000e54:	20000094 	.word	0x20000094
 8000e58:	2000010f 	.word	0x2000010f
 8000e5c:	20000110 	.word	0x20000110
 8000e60:	200000e8 	.word	0x200000e8
 8000e64:	20000000 	.word	0x20000000

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 ffd4 	bl	8002e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fb10 	bl	80024c4 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f9e1 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fd7e 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f9cd 	bl	8001270 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <MX_I2C1_Init+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_I2C1_Init+0x58>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f1e:	f000 fe35 	bl	8001b8c <HAL_I2C_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f28:	f000 f9a2 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000094 	.word	0x20000094
 8000f34:	40005400 	.word	0x40005400
 8000f38:	000186a0 	.word	0x000186a0

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <MX_GPIO_Init+0x120>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a41      	ldr	r2, [pc, #260]	; (800105c <MX_GPIO_Init+0x120>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <MX_GPIO_Init+0x120>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b3c      	ldr	r3, [pc, #240]	; (800105c <MX_GPIO_Init+0x120>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a3b      	ldr	r2, [pc, #236]	; (800105c <MX_GPIO_Init+0x120>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_GPIO_Init+0x120>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_GPIO_Init+0x120>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <MX_GPIO_Init+0x120>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_GPIO_Init+0x120>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4830      	ldr	r0, [pc, #192]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fa0:	f000 fdaa 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDPCB_Pin */
  GPIO_InitStruct.Pin = LEDPCB_Pin;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDPCB_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fbe:	f000 fc1f 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDCHBUTTON_Pin LEFTBUTTON_Pin RIGHTBUTTON_Pin MENUBUTTON_Pin
                           ADDCH1BUTTON_Pin ADDCH2BUTTON_Pin EQBUTTON_Pin */
  GPIO_InitStruct.Pin = ADDCHBUTTON_Pin|LEFTBUTTON_Pin|RIGHTBUTTON_Pin|MENUBUTTON_Pin
 8000fc2:	23fd      	movs	r3, #253	; 0xfd
 8000fc4:	613b      	str	r3, [r7, #16]
                          |ADDCH1BUTTON_Pin|ADDCH2BUTTON_Pin|EQBUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_GPIO_Init+0x128>)
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4824      	ldr	r0, [pc, #144]	; (8001068 <MX_GPIO_Init+0x12c>)
 8000fd6:	f000 fc13 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKBUTTON_Pin */
  GPIO_InitStruct.Pin = BACKBUTTON_Pin;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_GPIO_Init+0x128>)
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BACKBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	481f      	ldr	r0, [pc, #124]	; (800106c <MX_GPIO_Init+0x130>)
 8000fee:	f000 fc07 	bl	8001800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f000 fbcb 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f000 fbe4 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2007      	movs	r0, #7
 8001008:	f000 fbc3 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800100c:	2007      	movs	r0, #7
 800100e:	f000 fbdc 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2008      	movs	r0, #8
 8001018:	f000 fbbb 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800101c:	2008      	movs	r0, #8
 800101e:	f000 fbd4 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2009      	movs	r0, #9
 8001028:	f000 fbb3 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800102c:	2009      	movs	r0, #9
 800102e:	f000 fbcc 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200a      	movs	r0, #10
 8001038:	f000 fbab 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 fbc4 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2017      	movs	r0, #23
 8001048:	f000 fba3 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800104c:	2017      	movs	r0, #23
 800104e:	f000 fbbc 	bl	80017ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40011000 	.word	0x40011000
 8001064:	10110000 	.word	0x10110000
 8001068:	40010800 	.word	0x40010800
 800106c:	40010c00 	.word	0x40010c00

08001070 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af06      	add	r7, sp, #24
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
	if(buttonbeingpressed)
 800107a:	4b73      	ldr	r3, [pc, #460]	; (8001248 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 80dd 	bne.w	800123e <HAL_GPIO_EXTI_Callback+0x1ce>
		return;
	buttonbeingpressed=1;
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin) {
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b80      	cmp	r3, #128	; 0x80
 800108e:	f000 80c2 	beq.w	8001216 <HAL_GPIO_EXTI_Callback+0x1a6>
 8001092:	2b80      	cmp	r3, #128	; 0x80
 8001094:	f300 80cf 	bgt.w	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
 8001098:	2b20      	cmp	r3, #32
 800109a:	dc49      	bgt.n	8001130 <HAL_GPIO_EXTI_Callback+0xc0>
 800109c:	2b00      	cmp	r3, #0
 800109e:	f340 80ca 	ble.w	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
 80010a2:	3b01      	subs	r3, #1
 80010a4:	2b1f      	cmp	r3, #31
 80010a6:	f200 80c6 	bhi.w	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <HAL_GPIO_EXTI_Callback+0x40>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	08001137 	.word	0x08001137
 80010b4:	0800120f 	.word	0x0800120f
 80010b8:	08001237 	.word	0x08001237
 80010bc:	080011d3 	.word	0x080011d3
 80010c0:	08001237 	.word	0x08001237
 80010c4:	08001237 	.word	0x08001237
 80010c8:	08001237 	.word	0x08001237
 80010cc:	080011e9 	.word	0x080011e9
 80010d0:	08001237 	.word	0x08001237
 80010d4:	08001237 	.word	0x08001237
 80010d8:	08001237 	.word	0x08001237
 80010dc:	08001237 	.word	0x08001237
 80010e0:	08001237 	.word	0x08001237
 80010e4:	08001237 	.word	0x08001237
 80010e8:	08001237 	.word	0x08001237
 80010ec:	080011ff 	.word	0x080011ff
 80010f0:	08001237 	.word	0x08001237
 80010f4:	08001237 	.word	0x08001237
 80010f8:	08001237 	.word	0x08001237
 80010fc:	08001237 	.word	0x08001237
 8001100:	08001237 	.word	0x08001237
 8001104:	08001237 	.word	0x08001237
 8001108:	08001237 	.word	0x08001237
 800110c:	08001237 	.word	0x08001237
 8001110:	08001237 	.word	0x08001237
 8001114:	08001237 	.word	0x08001237
 8001118:	08001237 	.word	0x08001237
 800111c:	08001237 	.word	0x08001237
 8001120:	08001237 	.word	0x08001237
 8001124:	08001237 	.word	0x08001237
 8001128:	08001237 	.word	0x08001237
 800112c:	0800116b 	.word	0x0800116b
 8001130:	2b40      	cmp	r3, #64	; 0x40
 8001132:	d034      	beq.n	800119e <HAL_GPIO_EXTI_Callback+0x12e>
 8001134:	e07f      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCHBUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8001136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <HAL_GPIO_EXTI_Callback+0x1dc>)
 800113c:	f000 fcf4 	bl	8001b28 <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 0, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	2310      	movs	r3, #16
 8001146:	9304      	str	r3, [sp, #16]
 8001148:	2320      	movs	r3, #32
 800114a:	9303      	str	r3, [sp, #12]
 800114c:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	4941      	ldr	r1, [pc, #260]	; (8001260 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800115c:	4841      	ldr	r0, [pc, #260]	; (8001264 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800115e:	f7ff fc25 	bl	80009ac <addChar>
    	redraw = 1;
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
		break;
 8001168:	e065      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH1BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001170:	f000 fcda 	bl	8001b28 <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 1, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2310      	movs	r3, #16
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	2320      	movs	r3, #32
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	4934      	ldr	r1, [pc, #208]	; (8001260 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001190:	4834      	ldr	r0, [pc, #208]	; (8001264 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001192:	f7ff fc0b 	bl	80009ac <addChar>
    	redraw = 1;
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		break;
 800119c:	e04b      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH2BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80011a4:	f000 fcc0 	bl	8001b28 <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 2, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	2310      	movs	r3, #16
 80011ae:	9304      	str	r3, [sp, #16]
 80011b0:	2320      	movs	r3, #32
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	4927      	ldr	r1, [pc, #156]	; (8001260 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011c4:	4827      	ldr	r0, [pc, #156]	; (8001264 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80011c6:	f7ff fbf1 	bl	80009ac <addChar>
    	redraw = 1;
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		break;
 80011d0:	e031      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case LEFTBUTTON_Pin:
		moveLeft(filled, &cursor, &shift);
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011d8:	4920      	ldr	r1, [pc, #128]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fc3c 	bl	8000a58 <moveLeft>
		redraw = 1;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
		break;
 80011e6:	e026      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case RIGHTBUTTON_Pin:
		moveRight(filled, &cursor, &shift, SCREENWIDTH);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80011ea:	7818      	ldrb	r0, [r3, #0]
 80011ec:	2310      	movs	r3, #16
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011f0:	491a      	ldr	r1, [pc, #104]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011f2:	f7ff fc53 	bl	8000a9c <moveRight>
		redraw = 1;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		break;
 80011fc:	e01b      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case MENUBUTTON_Pin:
		nextPage(&page, NUMOFPAGES);
 80011fe:	2106      	movs	r1, #6
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001202:	f7ff fc74 	bl	8000aee <nextPage>
		redrawmenu = 1;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
		break;
 800120c:	e013      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case BACKBUTTON_Pin:
		redraw = 1;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
		break;
 8001214:	e00f      	b.n	8001236 <HAL_GPIO_EXTI_Callback+0x1c6>
	case EQBUTTON_Pin:
		computeEquation(expression, &filled, EXPRWIDTH);
 8001216:	2220      	movs	r2, #32
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800121c:	f7fe ff96 	bl	800014c <computeEquation>
		cursor=filled;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001226:	701a      	strb	r2, [r3, #0]
		shift=0;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
		redraw = 1;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
		break;
 8001234:	bf00      	nop
	}
	buttonbeingpressed=0;
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e000      	b.n	8001240 <HAL_GPIO_EXTI_Callback+0x1d0>
		return;
 800123e:	bf00      	nop
}
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000111 	.word	0x20000111
 800124c:	40011000 	.word	0x40011000
 8001250:	200000e8 	.word	0x200000e8
 8001254:	2000010e 	.word	0x2000010e
 8001258:	2000010d 	.word	0x2000010d
 800125c:	2000010c 	.word	0x2000010c
 8001260:	20000000 	.word	0x20000000
 8001264:	200000ec 	.word	0x200000ec
 8001268:	2000010f 	.word	0x2000010f
 800126c:	20000110 	.word	0x20000110

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_MspInit+0x40>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_MspInit+0x40>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_MspInit+0x40>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_MspInit+0x40>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_MspInit+0x40>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_MspInit+0x40>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_I2C_MspInit+0x94>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d134      	bne.n	800134a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_I2C_MspInit+0x98>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <HAL_I2C_MspInit+0x98>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_I2C_MspInit+0x98>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <HAL_I2C_MspInit+0x9c>)
 8001312:	f000 fa75 	bl	8001800 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_I2C_MspInit+0xa0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_I2C_MspInit+0xa0>)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_I2C_MspInit+0x98>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_I2C_MspInit+0x98>)
 8001338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_I2C_MspInit+0x98>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40005400 	.word	0x40005400
 8001358:	40021000 	.word	0x40021000
 800135c:	40010c00 	.word	0x40010c00
 8001360:	40010000 	.word	0x40010000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 f8db 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCHBUTTON_Pin);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fbd0 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BACKBUTTON_Pin);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 fbc9 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}

080013ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFTBUTTON_Pin);
 80013d2:	2004      	movs	r0, #4
 80013d4:	f000 fbc2 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHTBUTTON_Pin);
 80013e0:	2008      	movs	r0, #8
 80013e2:	f000 fbbb 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENUBUTTON_Pin);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f000 fbb4 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCH1BUTTON_Pin);
 80013fc:	2020      	movs	r0, #32
 80013fe:	f000 fbad 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADDCH2BUTTON_Pin);
 8001402:	2040      	movs	r0, #64	; 0x40
 8001404:	f000 fbaa 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EQBUTTON_Pin);
 8001408:	2080      	movs	r0, #128	; 0x80
 800140a:	f000 fba7 	bl	8001b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f001 fd06 	bl	8002e54 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20002800 	.word	0x20002800
 8001474:	00000400 	.word	0x00000400
 8001478:	20000114 	.word	0x20000114
 800147c:	20000268 	.word	0x20000268

08001480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff fff8 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001492:	490c      	ldr	r1, [pc, #48]	; (80014c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a8:	4c09      	ldr	r4, [pc, #36]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f001 fcd3 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff fc59 	bl	8000d70 <main>
  bx lr
 80014be:	4770      	bx	lr
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014c8:	08002ef8 	.word	0x08002ef8
  ldr r2, =_sbss
 80014cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014d0:	20000264 	.word	0x20000264

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x28>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f947 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fec2 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f95f 	bl	80017e6 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f000 f927 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000014 	.word	0x20000014
 800155c:	2000001c 	.word	0x2000001c
 8001560:	20000018 	.word	0x20000018

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	2000001c 	.word	0x2000001c
 8001584:	20000118 	.word	0x20000118

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000118 	.word	0x20000118

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000001c 	.word	0x2000001c

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	f7ff ff90 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2d 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff42 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff35 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e161      	b.n	8001ad8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8150 	bne.w	8001ad2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a97      	ldr	r2, [pc, #604]	; (8001a94 <HAL_GPIO_Init+0x294>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d05e      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800183c:	4a95      	ldr	r2, [pc, #596]	; (8001a94 <HAL_GPIO_Init+0x294>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d875      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001842:	4a95      	ldr	r2, [pc, #596]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d058      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001848:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <HAL_GPIO_Init+0x298>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d86f      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800184e:	4a93      	ldr	r2, [pc, #588]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d052      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001854:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d869      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800185a:	4a91      	ldr	r2, [pc, #580]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04c      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001860:	4a8f      	ldr	r2, [pc, #572]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d863      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001866:	4a8f      	ldr	r2, [pc, #572]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800186c:	4a8d      	ldr	r2, [pc, #564]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d85d      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d82a      	bhi.n	80018cc <HAL_GPIO_Init+0xcc>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d859      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_GPIO_Init+0x80>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018e7 	.word	0x080018e7
 800188c:	08001929 	.word	0x08001929
 8001890:	0800192f 	.word	0x0800192f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	0800192f 	.word	0x0800192f
 800189c:	0800192f 	.word	0x0800192f
 80018a0:	0800192f 	.word	0x0800192f
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	0800192f 	.word	0x0800192f
 80018ac:	0800192f 	.word	0x0800192f
 80018b0:	0800192f 	.word	0x0800192f
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	0800192f 	.word	0x0800192f
 80018bc:	0800192f 	.word	0x0800192f
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e029      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e024      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01f      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e01a      	b.n	8001930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e013      	b.n	8001930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e009      	b.n	8001930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e003      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x130>
          break;
 800192e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d801      	bhi.n	800193a <HAL_GPIO_Init+0x13a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e001      	b.n	800193e <HAL_GPIO_Init+0x13e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d802      	bhi.n	800194c <HAL_GPIO_Init+0x14c>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x152>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3b08      	subs	r3, #8
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a9 	beq.w	8001ad2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a49      	ldr	r2, [pc, #292]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3d      	ldr	r2, [pc, #244]	; (8001ab4 <HAL_GPIO_Init+0x2b4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_GPIO_Init+0x2bc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019d8:	2303      	movs	r3, #3
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	492f      	ldr	r1, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	492b      	ldr	r1, [pc, #172]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4921      	ldr	r1, [pc, #132]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491d      	ldr	r1, [pc, #116]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4913      	ldr	r1, [pc, #76]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01f      	beq.n	8001ac4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e01f      	b.n	8001ad2 <HAL_GPIO_Init+0x2d2>
 8001a92:	bf00      	nop
 8001a94:	10320000 	.word	0x10320000
 8001a98:	10310000 	.word	0x10310000
 8001a9c:	10220000 	.word	0x10220000
 8001aa0:	10210000 	.word	0x10210000
 8001aa4:	10120000 	.word	0x10120000
 8001aa8:	10110000 	.word	0x10110000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_Init+0x2f4>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <HAL_GPIO_Init+0x2f4>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae96 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43d9      	mvns	r1, r3
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	400b      	ands	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fa78 	bl	8001070 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e12b      	b.n	8001df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fb84 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bf0:	f001 f832 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8001bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4a81      	ldr	r2, [pc, #516]	; (8001e00 <HAL_I2C_Init+0x274>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d807      	bhi.n	8001c10 <HAL_I2C_Init+0x84>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a80      	ldr	r2, [pc, #512]	; (8001e04 <HAL_I2C_Init+0x278>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bf94      	ite	ls
 8001c08:	2301      	movls	r3, #1
 8001c0a:	2300      	movhi	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e006      	b.n	8001c1e <HAL_I2C_Init+0x92>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a7d      	ldr	r2, [pc, #500]	; (8001e08 <HAL_I2C_Init+0x27c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	bf94      	ite	ls
 8001c18:	2301      	movls	r3, #1
 8001c1a:	2300      	movhi	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e7      	b.n	8001df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a78      	ldr	r2, [pc, #480]	; (8001e0c <HAL_I2C_Init+0x280>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9b      	lsrs	r3, r3, #18
 8001c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_I2C_Init+0x274>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d802      	bhi.n	8001c60 <HAL_I2C_Init+0xd4>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	e009      	b.n	8001c74 <HAL_I2C_Init+0xe8>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a69      	ldr	r2, [pc, #420]	; (8001e10 <HAL_I2C_Init+0x284>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	3301      	adds	r3, #1
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	495c      	ldr	r1, [pc, #368]	; (8001e00 <HAL_I2C_Init+0x274>)
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d819      	bhi.n	8001cc8 <HAL_I2C_Init+0x13c>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e59      	subs	r1, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca2:	1c59      	adds	r1, r3, #1
 8001ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ca8:	400b      	ands	r3, r1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_I2C_Init+0x138>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e59      	subs	r1, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc2:	e051      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e04f      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <HAL_I2C_Init+0x168>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e012      	b.n	8001d1a <HAL_I2C_Init+0x18e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x196>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e022      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10e      	bne.n	8001d48 <HAL_I2C_Init+0x1bc>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e58      	subs	r0, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6859      	ldr	r1, [r3, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	440b      	add	r3, r1
 8001d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d46:	e00f      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	0099      	lsls	r1, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	6809      	ldr	r1, [r1, #0]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6911      	ldr	r1, [r2, #16]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68d2      	ldr	r2, [r2, #12]
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	000186a0 	.word	0x000186a0
 8001e04:	001e847f 	.word	0x001e847f
 8001e08:	003d08ff 	.word	0x003d08ff
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	10624dd3 	.word	0x10624dd3

08001e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	817b      	strh	r3, [r7, #10]
 8001e24:	4613      	mov	r3, r2
 8001e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fbae 	bl	8001588 <HAL_GetTick>
 8001e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	f040 80e0 	bne.w	8001ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2319      	movs	r3, #25
 8001e42:	2201      	movs	r2, #1
 8001e44:	4970      	ldr	r1, [pc, #448]	; (8002008 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f964 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0d3      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x50>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e0cc      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d007      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2221      	movs	r2, #33	; 0x21
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	893a      	ldrh	r2, [r7, #8]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a50      	ldr	r2, [pc, #320]	; (800200c <HAL_I2C_Master_Transmit+0x1f8>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ecc:	8979      	ldrh	r1, [r7, #10]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6a3a      	ldr	r2, [r7, #32]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f89c 	bl	8002010 <I2C_MasterRequestWrite>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e08d      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef8:	e066      	b.n	8001fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fa22 	bl	8002348 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d107      	bne.n	8001f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06b      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11b      	bne.n	8001f9c <HAL_I2C_Master_Transmit+0x188>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d017      	beq.n	8001f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fa19 	bl	80023d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d107      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e01a      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d194      	bne.n	8001efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	00100002 	.word	0x00100002
 800200c:	ffff0000 	.word	0xffff0000

08002010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	460b      	mov	r3, r1
 800201e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d006      	beq.n	800203a <I2C_MasterRequestWrite+0x2a>
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d003      	beq.n	800203a <I2C_MasterRequestWrite+0x2a>
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e00b      	b.n	8002064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	2b12      	cmp	r3, #18
 8002052:	d107      	bne.n	8002064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f84f 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208a:	d103      	bne.n	8002094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e035      	b.n	8002104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020a0:	d108      	bne.n	80020b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e01b      	b.n	80020ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	11db      	asrs	r3, r3, #7
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 0306 	and.w	r3, r3, #6
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f063 030f 	orn	r3, r3, #15
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <I2C_MasterRequestWrite+0xfc>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f898 	bl	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e010      	b.n	8002104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <I2C_MasterRequestWrite+0x100>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f888 	bl	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	00010008 	.word	0x00010008
 8002110:	00010002 	.word	0x00010002

08002114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002124:	e048      	b.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800212c:	d044      	beq.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7ff fa2b 	bl	8001588 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d139      	bne.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0c1b      	lsrs	r3, r3, #16
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10d      	bne.n	800216a <I2C_WaitOnFlagUntilTimeout+0x56>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	43da      	mvns	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	e00c      	b.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	429a      	cmp	r2, r3
 8002188:	d116      	bne.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e023      	b.n	8002200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <I2C_WaitOnFlagUntilTimeout+0xca>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4013      	ands	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	e00c      	b.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d093      	beq.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002216:	e071      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d123      	bne.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e067      	b.n	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002276:	d041      	beq.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7ff f986 	bl	8001588 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d136      	bne.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10c      	bne.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4013      	ands	r3, r2
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e00b      	b.n	80022ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e021      	b.n	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	0c1b      	lsrs	r3, r3, #16
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10c      	bne.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	43da      	mvns	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4013      	ands	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e00b      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f af6d 	bne.w	8002218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002354:	e034      	b.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f886 	bl	8002468 <I2C_IsAcknowledgeFailed>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e034      	b.n	80023d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236c:	d028      	beq.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7ff f90b 	bl	8001588 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11d      	bne.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	2b80      	cmp	r3, #128	; 0x80
 8002390:	d016      	beq.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b80      	cmp	r3, #128	; 0x80
 80023cc:	d1c3      	bne.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e4:	e034      	b.n	8002450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f83e 	bl	8002468 <I2C_IsAcknowledgeFailed>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e034      	b.n	8002460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fc:	d028      	beq.n	8002450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7ff f8c3 	bl	8001588 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d11d      	bne.n	8002450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d016      	beq.n	8002450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e007      	b.n	8002460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d1c3      	bne.n	80023e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d11b      	bne.n	80024b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e272      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d00c      	beq.n	800250a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f0:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d06c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x12c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d168      	bne.n	80025f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e24c      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x76>
 800252c:	4b80      	ldr	r3, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7f      	ldr	r2, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e02e      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x98>
 8002542:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b78      	ldr	r3, [pc, #480]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a77      	ldr	r2, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e01d      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0xbc>
 8002566:	4b72      	ldr	r3, [pc, #456]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a71      	ldr	r2, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a67      	ldr	r2, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fff2 	bl	8001588 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe ffee 	bl	8001588 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e200      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe4>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe ffde 	bl	8001588 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe ffda 	bl	8001588 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1ec      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x10c>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1c0      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4939      	ldr	r1, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e03a      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe ff93 	bl	8001588 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe ff8f 	bl	8001588 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1a1      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4927      	ldr	r1, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe ff72 	bl	8001588 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe ff6e 	bl	8001588 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e180      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03a      	beq.n	8002748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe ff52 	bl	8001588 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe ff4e 	bl	8001588 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e160      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f000 faba 	bl	8002c80 <RCC_Delay>
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe ff38 	bl	8001588 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271a:	e00f      	b.n	800273c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe ff34 	bl	8001588 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d908      	bls.n	800273c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e146      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	42420000 	.word	0x42420000
 8002738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e9      	bne.n	800271c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a6 	beq.w	80028a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a87      	ldr	r2, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b85      	ldr	r3, [pc, #532]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <HAL_RCC_OscConfig+0x4c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	4b7f      	ldr	r3, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x4c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7e      	ldr	r2, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x4c8>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7fe fef5 	bl	8001588 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe fef1 	bl	8001588 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e103      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4c8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x312>
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x334>
 80027de:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a69      	ldr	r2, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6213      	str	r3, [r2, #32]
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a66      	ldr	r2, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	e01c      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x356>
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a60      	ldr	r2, [pc, #384]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a5d      	ldr	r2, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a5a      	ldr	r2, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe fea5 	bl	8001588 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fea1 	bl	8001588 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0b1      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x37e>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fe8f 	bl	8001588 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fe8b 	bl	8001588 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e09b      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8087 	beq.w	80029ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d061      	beq.n	800297c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d146      	bne.n	800294e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_OscConfig+0x4cc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fe5f 	bl	8001588 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fe5b 	bl	8001588 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e06d      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4921      	ldr	r1, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a19      	ldr	r1, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	430b      	orrs	r3, r1
 800291a:	491b      	ldr	r1, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fe2f 	bl	8001588 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe fe2b 	bl	8001588 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e03d      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x46a>
 800294c:	e035      	b.n	80029ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCC_OscConfig+0x4cc>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fe18 	bl	8001588 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fe14 	bl	8001588 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e026      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x498>
 800297a:	e01e      	b.n	80029ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e019      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_OscConfig+0x500>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fd66 	bl	8001588 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe fd62 	bl	8001588 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 0207 	bic.w	r2, r3, #7
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1cc>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fcc4 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08002ec4 	.word	0x08002ec4
 8002b94:	20000014 	.word	0x20000014
 8002b98:	20000018 	.word	0x20000018

08002b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x30>
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bca:	e027      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bce:	613b      	str	r3, [r7, #16]
      break;
 8002bd0:	e027      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0c9b      	lsrs	r3, r3, #18
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d010      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0c5b      	lsrs	r3, r3, #17
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfe:	fb03 f202 	mul.w	r2, r3, r2
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e004      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	613b      	str	r3, [r7, #16]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1e:	613b      	str	r3, [r7, #16]
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	693b      	ldr	r3, [r7, #16]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	007a1200 	.word	0x007a1200
 8002c38:	08002edc 	.word	0x08002edc
 8002c3c:	08002eec 	.word	0x08002eec
 8002c40:	003d0900 	.word	0x003d0900

08002c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	20000014 	.word	0x20000014

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c5c:	f7ff fff2 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08002ed4 	.word	0x08002ed4

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000014 	.word	0x20000014
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <malloc>:
 8002cbc:	4b02      	ldr	r3, [pc, #8]	; (8002cc8 <malloc+0xc>)
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	f000 b823 	b.w	8002d0c <_malloc_r>
 8002cc6:	bf00      	nop
 8002cc8:	2000006c 	.word	0x2000006c

08002ccc <sbrk_aligned>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4e0e      	ldr	r6, [pc, #56]	; (8002d08 <sbrk_aligned+0x3c>)
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	6831      	ldr	r1, [r6, #0]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b911      	cbnz	r1, 8002cde <sbrk_aligned+0x12>
 8002cd8:	f000 f8ac 	bl	8002e34 <_sbrk_r>
 8002cdc:	6030      	str	r0, [r6, #0]
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 f8a7 	bl	8002e34 <_sbrk_r>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d00a      	beq.n	8002d00 <sbrk_aligned+0x34>
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d007      	beq.n	8002d04 <sbrk_aligned+0x38>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f89c 	bl	8002e34 <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d101      	bne.n	8002d04 <sbrk_aligned+0x38>
 8002d00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	20000120 	.word	0x20000120

08002d0c <_malloc_r>:
 8002d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d10:	1ccd      	adds	r5, r1, #3
 8002d12:	f025 0503 	bic.w	r5, r5, #3
 8002d16:	3508      	adds	r5, #8
 8002d18:	2d0c      	cmp	r5, #12
 8002d1a:	bf38      	it	cc
 8002d1c:	250c      	movcc	r5, #12
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	4607      	mov	r7, r0
 8002d22:	db01      	blt.n	8002d28 <_malloc_r+0x1c>
 8002d24:	42a9      	cmp	r1, r5
 8002d26:	d905      	bls.n	8002d34 <_malloc_r+0x28>
 8002d28:	230c      	movs	r3, #12
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4630      	mov	r0, r6
 8002d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e08 <_malloc_r+0xfc>
 8002d38:	f000 f868 	bl	8002e0c <__malloc_lock>
 8002d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d40:	461c      	mov	r4, r3
 8002d42:	bb5c      	cbnz	r4, 8002d9c <_malloc_r+0x90>
 8002d44:	4629      	mov	r1, r5
 8002d46:	4638      	mov	r0, r7
 8002d48:	f7ff ffc0 	bl	8002ccc <sbrk_aligned>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	4604      	mov	r4, r0
 8002d50:	d155      	bne.n	8002dfe <_malloc_r+0xf2>
 8002d52:	f8d8 4000 	ldr.w	r4, [r8]
 8002d56:	4626      	mov	r6, r4
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d145      	bne.n	8002de8 <_malloc_r+0xdc>
 8002d5c:	2c00      	cmp	r4, #0
 8002d5e:	d048      	beq.n	8002df2 <_malloc_r+0xe6>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	4631      	mov	r1, r6
 8002d64:	4638      	mov	r0, r7
 8002d66:	eb04 0903 	add.w	r9, r4, r3
 8002d6a:	f000 f863 	bl	8002e34 <_sbrk_r>
 8002d6e:	4581      	cmp	r9, r0
 8002d70:	d13f      	bne.n	8002df2 <_malloc_r+0xe6>
 8002d72:	6821      	ldr	r1, [r4, #0]
 8002d74:	4638      	mov	r0, r7
 8002d76:	1a6d      	subs	r5, r5, r1
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7ff ffa7 	bl	8002ccc <sbrk_aligned>
 8002d7e:	3001      	adds	r0, #1
 8002d80:	d037      	beq.n	8002df2 <_malloc_r+0xe6>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	442b      	add	r3, r5
 8002d86:	6023      	str	r3, [r4, #0]
 8002d88:	f8d8 3000 	ldr.w	r3, [r8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d038      	beq.n	8002e02 <_malloc_r+0xf6>
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	42a2      	cmp	r2, r4
 8002d94:	d12b      	bne.n	8002dee <_malloc_r+0xe2>
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e00f      	b.n	8002dbc <_malloc_r+0xb0>
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	1b52      	subs	r2, r2, r5
 8002da0:	d41f      	bmi.n	8002de2 <_malloc_r+0xd6>
 8002da2:	2a0b      	cmp	r2, #11
 8002da4:	d917      	bls.n	8002dd6 <_malloc_r+0xca>
 8002da6:	1961      	adds	r1, r4, r5
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	6025      	str	r5, [r4, #0]
 8002dac:	bf18      	it	ne
 8002dae:	6059      	strne	r1, [r3, #4]
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	bf08      	it	eq
 8002db4:	f8c8 1000 	streq.w	r1, [r8]
 8002db8:	5162      	str	r2, [r4, r5]
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f104 060b 	add.w	r6, r4, #11
 8002dc2:	f000 f829 	bl	8002e18 <__malloc_unlock>
 8002dc6:	f026 0607 	bic.w	r6, r6, #7
 8002dca:	1d23      	adds	r3, r4, #4
 8002dcc:	1af2      	subs	r2, r6, r3
 8002dce:	d0ae      	beq.n	8002d2e <_malloc_r+0x22>
 8002dd0:	1b9b      	subs	r3, r3, r6
 8002dd2:	50a3      	str	r3, [r4, r2]
 8002dd4:	e7ab      	b.n	8002d2e <_malloc_r+0x22>
 8002dd6:	42a3      	cmp	r3, r4
 8002dd8:	6862      	ldr	r2, [r4, #4]
 8002dda:	d1dd      	bne.n	8002d98 <_malloc_r+0x8c>
 8002ddc:	f8c8 2000 	str.w	r2, [r8]
 8002de0:	e7ec      	b.n	8002dbc <_malloc_r+0xb0>
 8002de2:	4623      	mov	r3, r4
 8002de4:	6864      	ldr	r4, [r4, #4]
 8002de6:	e7ac      	b.n	8002d42 <_malloc_r+0x36>
 8002de8:	4634      	mov	r4, r6
 8002dea:	6876      	ldr	r6, [r6, #4]
 8002dec:	e7b4      	b.n	8002d58 <_malloc_r+0x4c>
 8002dee:	4613      	mov	r3, r2
 8002df0:	e7cc      	b.n	8002d8c <_malloc_r+0x80>
 8002df2:	230c      	movs	r3, #12
 8002df4:	4638      	mov	r0, r7
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	f000 f80e 	bl	8002e18 <__malloc_unlock>
 8002dfc:	e797      	b.n	8002d2e <_malloc_r+0x22>
 8002dfe:	6025      	str	r5, [r4, #0]
 8002e00:	e7dc      	b.n	8002dbc <_malloc_r+0xb0>
 8002e02:	605b      	str	r3, [r3, #4]
 8002e04:	deff      	udf	#255	; 0xff
 8002e06:	bf00      	nop
 8002e08:	2000011c 	.word	0x2000011c

08002e0c <__malloc_lock>:
 8002e0c:	4801      	ldr	r0, [pc, #4]	; (8002e14 <__malloc_lock+0x8>)
 8002e0e:	f000 b84b 	b.w	8002ea8 <__retarget_lock_acquire_recursive>
 8002e12:	bf00      	nop
 8002e14:	20000260 	.word	0x20000260

08002e18 <__malloc_unlock>:
 8002e18:	4801      	ldr	r0, [pc, #4]	; (8002e20 <__malloc_unlock+0x8>)
 8002e1a:	f000 b846 	b.w	8002eaa <__retarget_lock_release_recursive>
 8002e1e:	bf00      	nop
 8002e20:	20000260 	.word	0x20000260

08002e24 <memset>:
 8002e24:	4603      	mov	r3, r0
 8002e26:	4402      	add	r2, r0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <_sbrk_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	2300      	movs	r3, #0
 8002e38:	4d05      	ldr	r5, [pc, #20]	; (8002e50 <_sbrk_r+0x1c>)
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fe fae8 	bl	8001414 <_sbrk>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_sbrk_r+0x1a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_sbrk_r+0x1a>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	2000025c 	.word	0x2000025c

08002e54 <__errno>:
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <__errno+0x8>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000006c 	.word	0x2000006c

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	2600      	movs	r6, #0
 8002e64:	4d0c      	ldr	r5, [pc, #48]	; (8002e98 <__libc_init_array+0x38>)
 8002e66:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	42a6      	cmp	r6, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	f000 f81c 	bl	8002eac <_init>
 8002e74:	2600      	movs	r6, #0
 8002e76:	4d0a      	ldr	r5, [pc, #40]	; (8002ea0 <__libc_init_array+0x40>)
 8002e78:	4c0a      	ldr	r4, [pc, #40]	; (8002ea4 <__libc_init_array+0x44>)
 8002e7a:	1b64      	subs	r4, r4, r5
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	42a6      	cmp	r6, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e88:	4798      	blx	r3
 8002e8a:	3601      	adds	r6, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e92:	4798      	blx	r3
 8002e94:	3601      	adds	r6, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	08002ef0 	.word	0x08002ef0
 8002e9c:	08002ef0 	.word	0x08002ef0
 8002ea0:	08002ef0 	.word	0x08002ef0
 8002ea4:	08002ef4 	.word	0x08002ef4

08002ea8 <__retarget_lock_acquire_recursive>:
 8002ea8:	4770      	bx	lr

08002eaa <__retarget_lock_release_recursive>:
 8002eaa:	4770      	bx	lr

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
