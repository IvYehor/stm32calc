/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "lcddisplay.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define LCDADDR (0x7C>>1)
#define BACKLIGHTADDR 0x6B

#define COMMAND 0x80
#define DATA 0x40

void LCDsend(uint8_t control, uint8_t value);
void LEDsend(uint8_t control, uint8_t value);
void LCDinit();
void LCDprint(uint8_t value);
void LCDposCursor(uint8_t row, uint8_t col);
void LCDclear();

void LCDsetDisplay(uint8_t value);
void LCDsetCursor(uint8_t value);
void LCDsetBlink(uint8_t value);
void LCDsetBacklight(uint8_t value);

uint8_t displayOn = 0;
uint8_t cursorOn = 0;
uint8_t blinkOn = 0;


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  //stm32f103c6t6a

  /*HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LEDBREAD_GPIO_Port, LEDBREAD_Pin, GPIO_PIN_RESET);
  HAL_Delay(500);
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LEDBREAD_GPIO_Port, LEDBREAD_Pin, GPIO_PIN_SET);
  HAL_Delay(500);
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LEDBREAD_GPIO_Port, LEDBREAD_Pin, GPIO_PIN_RESET);
*/

  //LCDinit(&hi2c1);

  /*uint8_t d0[2] = {COMMAND, 0x28};
  uint8_t d1[2] = {COMMAND, 0x0C};
  uint8_t d2[2] = {COMMAND, 0x01};
  uint8_t d3[2] = {COMMAND, 0x06};

  HAL_Delay(50);
  HAL_I2C_Master_Transmit(&hi2c1, LCDADDR<<1, d0, 2, HAL_MAX_DELAY);
  HAL_Delay(5);
  HAL_I2C_Master_Transmit(&hi2c1, LCDADDR<<1, d1, 2, HAL_MAX_DELAY);
  HAL_Delay(1); // 50 us

  displayOn = 1;
  cursorOn = 0;
  blinkOn = 0;

  HAL_I2C_Master_Transmit(&hi2c1, LCDADDR<<1, d2, 2, HAL_MAX_DELAY);
  HAL_Delay(2);

  HAL_I2C_Master_Transmit(&hi2c1, LCDADDR<<1, d3, 2, HAL_MAX_DELAY);
  HAL_Delay(1); // 50 us

  uint8_t led0[2] = {0x2F, 0x00};
  uint8_t led1[2] = {0x00, 0x20};
  uint8_t led2[2] = {0x01, 0x00};
  uint8_t led3[2] = {0x02, 0x01};

  uint8_t led4[2] = {0x03, 4};
  uint8_t led5[2] = {0x06, 255};
  uint8_t led6[2] = {0x05, 255};
  uint8_t led7[2] = {0x04, 255};
  uint8_t led8[2] = {0x07, 0xFF};

  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led0, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led1, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led2, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led3, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led4, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led5, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led6, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led7, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, BACKLIGHTADDR<<1, led8, 2, HAL_MAX_DELAY);

  uint8_t text[17] = "It fuckin works!";
  uint8_t dprint[2] = {DATA, 'j'};
  for (uint8_t i = 0; i < 16; ++i) {
	  dprint[1] = text[i];
	  HAL_I2C_Master_Transmit(&hi2c1, LCDADDR<<1, dprint, 2, HAL_MAX_DELAY);
  }
  HAL_Delay(1);*/

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
	  //HAL_I2C_Master_Transmit(&hi2c1, 0x7C>>1, d0, 1, HAL_MAX_DELAY);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDBREAD_GPIO_Port, LEDBREAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LEDPCB_Pin */
  GPIO_InitStruct.Pin = LEDPCB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDPCB_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LEDBREAD_Pin */
  GPIO_InitStruct.Pin = LEDBREAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDBREAD_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
