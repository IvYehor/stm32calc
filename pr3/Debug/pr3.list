
pr3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fcc  08002fcc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fcc  08002fcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08003044  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003044  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076f0  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b4  00000000  00000000  000277cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000626  00000000  00000000  00029898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d20  00000000  00000000  00029ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a12d  00000000  00000000  00040bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fd10  00000000  00000000  0004ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022e8  00000000  00000000  000caa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ccd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f80 	.word	0x08002f80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f80 	.word	0x08002f80

0800014c <computeEquation>:

#include "calculator2.h"

void computeEquation(uint8_t *expression, uint8_t *filled, const uint8_t exprWidth) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
	uint8_t nextTokenBegin = 0, nextTokenEnd = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	76fb      	strb	r3, [r7, #27]
 800015e:	2300      	movs	r3, #0
 8000160:	76bb      	strb	r3, [r7, #26]
	struct Node *tree = parseE(expression, *filled, &nextTokenBegin, &nextTokenEnd);
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	7819      	ldrb	r1, [r3, #0]
 8000166:	f107 031a 	add.w	r3, r7, #26
 800016a:	f107 021b 	add.w	r2, r7, #27
 800016e:	68f8      	ldr	r0, [r7, #12]
 8000170:	f000 f96e 	bl	8000450 <parseE>
 8000174:	61f8      	str	r0, [r7, #28]
	if(tree == NULL) {
 8000176:	69fb      	ldr	r3, [r7, #28]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d106      	bne.n	800018a <computeEquation+0x3e>
		pasteToExpression(expression, filled, exprWidth, 4);
 800017c:	79fa      	ldrb	r2, [r7, #7]
 800017e:	2304      	movs	r3, #4
 8000180:	68b9      	ldr	r1, [r7, #8]
 8000182:	68f8      	ldr	r0, [r7, #12]
 8000184:	f000 f8f0 	bl	8000368 <pasteToExpression>
 8000188:	e010      	b.n	80001ac <computeEquation+0x60>
		//pasteErrorToExpression(expression, filled, exprWidth, 0);
		return;
	}
	uint32_t res = 4;
 800018a:	2304      	movs	r3, #4
 800018c:	617b      	str	r3, [r7, #20]
	if(!evaluate(tree, &res) || 1) {
 800018e:	f107 0314 	add.w	r3, r7, #20
 8000192:	4619      	mov	r1, r3
 8000194:	69f8      	ldr	r0, [r7, #28]
 8000196:	f000 f829 	bl	80001ec <evaluate>
		pasteToExpression(expression, filled, exprWidth, res);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	79fa      	ldrb	r2, [r7, #7]
 800019e:	68b9      	ldr	r1, [r7, #8]
 80001a0:	68f8      	ldr	r0, [r7, #12]
 80001a2:	f000 f8e1 	bl	8000368 <pasteToExpression>
	}
	else {
		pasteErrorToExpression(expression, filled, exprWidth, 1);
	}
	freeTree(tree);
 80001a6:	69f8      	ldr	r0, [r7, #28]
 80001a8:	f000 f803 	bl	80001b2 <freeTree>
}
 80001ac:	3720      	adds	r7, #32
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}

080001b2 <freeTree>:

void freeTree(struct Node *eq) {
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(eq->lNode != NULL)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d004      	beq.n	80001cc <freeTree+0x1a>
			freeTree(eq->lNode);
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff fff3 	bl	80001b2 <freeTree>
	if(eq->rNode != NULL)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d004      	beq.n	80001de <freeTree+0x2c>
			freeTree(eq->rNode);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffea 	bl	80001b2 <freeTree>
	free(eq);
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f002 fd8e 	bl	8002d00 <free>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <evaluate>:


uint8_t evaluate(struct Node *eq, uint32_t *result) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
	uint32_t a, b;
	switch (eq->type)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b05      	cmp	r3, #5
 80001fc:	f200 80ae 	bhi.w	800035c <evaluate+0x170>
 8000200:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <evaluate+0x1c>)
 8000202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000206:	bf00      	nop
 8000208:	08000221 	.word	0x08000221
 800020c:	0800022b 	.word	0x0800022b
 8000210:	0800026b 	.word	0x0800026b
 8000214:	080002ab 	.word	0x080002ab
 8000218:	080002ed 	.word	0x080002ed
 800021c:	08000339 	.word	0x08000339
	{
	case NUMBER:
		*result=eq->value;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	685a      	ldr	r2, [r3, #4]
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
		break;
 8000228:	e099      	b.n	800035e <evaluate+0x172>
	
	case ADD:
		if(evaluate(eq->lNode, &a))
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	f107 0214 	add.w	r2, r7, #20
 8000232:	4611      	mov	r1, r2
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffd9 	bl	80001ec <evaluate>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <evaluate+0x58>
			return 1;
 8000240:	2301      	movs	r3, #1
 8000242:	e08d      	b.n	8000360 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	f107 0210 	add.w	r2, r7, #16
 800024c:	4611      	mov	r1, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffcc 	bl	80001ec <evaluate>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <evaluate+0x72>
			return 1;
 800025a:	2301      	movs	r3, #1
 800025c:	e080      	b.n	8000360 <evaluate+0x174>
		*result=a+b;
 800025e:	697a      	ldr	r2, [r7, #20]
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	441a      	add	r2, r3
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	601a      	str	r2, [r3, #0]
		break;
 8000268:	e079      	b.n	800035e <evaluate+0x172>
	
	case SUB:
		if(evaluate(eq->lNode, &a))
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f107 0214 	add.w	r2, r7, #20
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffb9 	bl	80001ec <evaluate>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <evaluate+0x98>
			return 1;
 8000280:	2301      	movs	r3, #1
 8000282:	e06d      	b.n	8000360 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	f107 0210 	add.w	r2, r7, #16
 800028c:	4611      	mov	r1, r2
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffac 	bl	80001ec <evaluate>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <evaluate+0xb2>
			return 1;
 800029a:	2301      	movs	r3, #1
 800029c:	e060      	b.n	8000360 <evaluate+0x174>
		*result=a-b;
 800029e:	697a      	ldr	r2, [r7, #20]
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	601a      	str	r2, [r3, #0]
		break;
 80002a8:	e059      	b.n	800035e <evaluate+0x172>
	
	case MULT:
		if(evaluate(eq->lNode, &a))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	f107 0214 	add.w	r2, r7, #20
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff99 	bl	80001ec <evaluate>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <evaluate+0xd8>
			return 1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	e04d      	b.n	8000360 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	f107 0210 	add.w	r2, r7, #16
 80002cc:	4611      	mov	r1, r2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ff8c 	bl	80001ec <evaluate>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <evaluate+0xf2>
			return 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	e040      	b.n	8000360 <evaluate+0x174>
		*result=a*b;
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	fb03 f202 	mul.w	r2, r3, r2
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	601a      	str	r2, [r3, #0]
		break;
 80002ea:	e038      	b.n	800035e <evaluate+0x172>
	
	case DIV:
		uint32_t a, b;
		if(evaluate(eq->lNode, &a))
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	f107 020c 	add.w	r2, r7, #12
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff78 	bl	80001ec <evaluate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <evaluate+0x11a>
			return 1;
 8000302:	2301      	movs	r3, #1
 8000304:	e02c      	b.n	8000360 <evaluate+0x174>
		if(evaluate(eq->rNode, &b))
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	f107 0208 	add.w	r2, r7, #8
 800030e:	4611      	mov	r1, r2
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff6b 	bl	80001ec <evaluate>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <evaluate+0x134>
			return 1;
 800031c:	2301      	movs	r3, #1
 800031e:	e01f      	b.n	8000360 <evaluate+0x174>
		if(b == 0)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d101      	bne.n	800032a <evaluate+0x13e>
			return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e01a      	b.n	8000360 <evaluate+0x174>
		*result=a/b;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
		break;
 8000336:	e012      	b.n	800035e <evaluate+0x172>
	
	case NEG:
		if(evaluate(eq->lNode, &b))
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f107 0208 	add.w	r2, r7, #8
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff52 	bl	80001ec <evaluate>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <evaluate+0x166>
			return 1;
 800034e:	2301      	movs	r3, #1
 8000350:	e006      	b.n	8000360 <evaluate+0x174>
		*result=-a;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	425a      	negs	r2, r3
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	601a      	str	r2, [r3, #0]
		break;
 800035a:	e000      	b.n	800035e <evaluate+0x172>
	
	default:
		break;
 800035c:	bf00      	nop
	}
	return 0;
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <pasteToExpression>:
void pasteToExpression(uint8_t *expression, uint8_t *filled, uint8_t exprWidth, uint32_t value) {
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	4613      	mov	r3, r2
 8000376:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
	if(value == 0) {
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d11f      	bne.n	80003c2 <pasteToExpression+0x5a>
		expression[0] = 48;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2230      	movs	r2, #48	; 0x30
 8000386:	701a      	strb	r2, [r3, #0]
		i=1;
 8000388:	2301      	movs	r3, #1
 800038a:	75fb      	strb	r3, [r7, #23]
	}
	while(value && i < exprWidth) {
 800038c:	e019      	b.n	80003c2 <pasteToExpression+0x5a>
		expression[i] = value%10+48;
 800038e:	6839      	ldr	r1, [r7, #0]
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <pasteToExpression+0xe4>)
 8000392:	fba3 2301 	umull	r2, r3, r3, r1
 8000396:	08da      	lsrs	r2, r3, #3
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	1aca      	subs	r2, r1, r3
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	68f9      	ldr	r1, [r7, #12]
 80003a8:	440b      	add	r3, r1
 80003aa:	3230      	adds	r2, #48	; 0x30
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	701a      	strb	r2, [r3, #0]
		value/=10;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	4a26      	ldr	r2, [pc, #152]	; (800044c <pasteToExpression+0xe4>)
 80003b4:	fba2 2303 	umull	r2, r3, r2, r3
 80003b8:	08db      	lsrs	r3, r3, #3
 80003ba:	603b      	str	r3, [r7, #0]
		++i;
 80003bc:	7dfb      	ldrb	r3, [r7, #23]
 80003be:	3301      	adds	r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
	while(value && i < exprWidth) {
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d003      	beq.n	80003d0 <pasteToExpression+0x68>
 80003c8:	7dfa      	ldrb	r2, [r7, #23]
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d3de      	bcc.n	800038e <pasteToExpression+0x26>
	}
	for (uint8_t k = i; k < exprWidth; ++k) {
 80003d0:	7dfb      	ldrb	r3, [r7, #23]
 80003d2:	75bb      	strb	r3, [r7, #22]
 80003d4:	e007      	b.n	80003e6 <pasteToExpression+0x7e>
		expression[k] = ' ';
 80003d6:	7dbb      	ldrb	r3, [r7, #22]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	4413      	add	r3, r2
 80003dc:	2220      	movs	r2, #32
 80003de:	701a      	strb	r2, [r3, #0]
	for (uint8_t k = i; k < exprWidth; ++k) {
 80003e0:	7dbb      	ldrb	r3, [r7, #22]
 80003e2:	3301      	adds	r3, #1
 80003e4:	75bb      	strb	r3, [r7, #22]
 80003e6:	7dba      	ldrb	r2, [r7, #22]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d3f3      	bcc.n	80003d6 <pasteToExpression+0x6e>
	}
	for(uint8_t j = 0; j < i/2; ++j) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	757b      	strb	r3, [r7, #21]
 80003f2:	e01c      	b.n	800042e <pasteToExpression+0xc6>
		uint8_t a = expression[j];
 80003f4:	7d7b      	ldrb	r3, [r7, #21]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	753b      	strb	r3, [r7, #20]
		expression[j] = expression[i-1-j];
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	1e5a      	subs	r2, r3, #1
 8000402:	7d7b      	ldrb	r3, [r7, #21]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	461a      	mov	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	441a      	add	r2, r3
 800040c:	7d7b      	ldrb	r3, [r7, #21]
 800040e:	68f9      	ldr	r1, [r7, #12]
 8000410:	440b      	add	r3, r1
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	701a      	strb	r2, [r3, #0]
		expression[i-1-j] = a;
 8000416:	7dfb      	ldrb	r3, [r7, #23]
 8000418:	1e5a      	subs	r2, r3, #1
 800041a:	7d7b      	ldrb	r3, [r7, #21]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	461a      	mov	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4413      	add	r3, r2
 8000424:	7d3a      	ldrb	r2, [r7, #20]
 8000426:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < i/2; ++j) {
 8000428:	7d7b      	ldrb	r3, [r7, #21]
 800042a:	3301      	adds	r3, #1
 800042c:	757b      	strb	r3, [r7, #21]
 800042e:	7dfb      	ldrb	r3, [r7, #23]
 8000430:	085b      	lsrs	r3, r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	7d7a      	ldrb	r2, [r7, #21]
 8000436:	429a      	cmp	r2, r3
 8000438:	d3dc      	bcc.n	80003f4 <pasteToExpression+0x8c>
	}
	*filled = i;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	7dfa      	ldrb	r2, [r7, #23]
 800043e:	701a      	strb	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	cccccccd 	.word	0xcccccccd

08000450 <parseE>:
			expression[i] = ' ';
		*filled = 6;
	}
}

struct Node *parseE(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b08c      	sub	sp, #48	; 0x30
 8000454:	af02      	add	r7, sp, #8
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	460b      	mov	r3, r1
 800045e:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 8000460:	7af9      	ldrb	r1, [r7, #11]
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f000 f866 	bl	8000538 <parseT>
 800046c:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	2b00      	cmp	r3, #0
 8000472:	d101      	bne.n	8000478 <parseE+0x28>
		return NULL;
 8000474:	2300      	movs	r3, #0
 8000476:	e05b      	b.n	8000530 <parseE+0xe0>
		
	uint8_t tokentype;
	uint32_t tokenVal;

	uint8_t nextTokenBeginTemp = *nextTokenBegin, nextTokenEndTemp = *nextTokenEnd;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	74fb      	strb	r3, [r7, #19]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	74bb      	strb	r3, [r7, #18]
	//!lastToken(filled, *nextTokenEnd)
	while(!nextToken(expression, filled, &nextTokenBeginTemp, &nextTokenEndTemp)) {
 8000484:	e048      	b.n	8000518 <parseE+0xc8>
		getToken(expression, nextTokenBeginTemp, nextTokenEndTemp, &tokentype, &tokenVal);
 8000486:	7cf9      	ldrb	r1, [r7, #19]
 8000488:	7cba      	ldrb	r2, [r7, #18]
 800048a:	f107 001b 	add.w	r0, r7, #27
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	4603      	mov	r3, r0
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f000 f98b 	bl	80007b2 <getToken>
		if(tokentype == 0) {
 800049c:	7efb      	ldrb	r3, [r7, #27]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d104      	bne.n	80004ac <parseE+0x5c>
			freeTree(f);
 80004a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004a4:	f7ff fe85 	bl	80001b2 <freeTree>
			return NULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	e041      	b.n	8000530 <parseE+0xe0>
		}
		if(tokenVal == '+' || tokenVal == '-') {
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	2b2b      	cmp	r3, #43	; 0x2b
 80004b0:	d002      	beq.n	80004b8 <parseE+0x68>
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2b2d      	cmp	r3, #45	; 0x2d
 80004b6:	d13a      	bne.n	800052e <parseE+0xde>
			*nextTokenBegin = nextTokenBeginTemp;
 80004b8:	7cfa      	ldrb	r2, [r7, #19]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	701a      	strb	r2, [r3, #0]
			*nextTokenEnd = nextTokenEndTemp;
 80004be:	7cba      	ldrb	r2, [r7, #18]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	701a      	strb	r2, [r3, #0]
			struct Node *f2 = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 80004c4:	7af9      	ldrb	r1, [r7, #11]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f000 f834 	bl	8000538 <parseT>
 80004d0:	6238      	str	r0, [r7, #32]
			nextTokenBeginTemp = *nextTokenBegin;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	74fb      	strb	r3, [r7, #19]
			nextTokenEndTemp = *nextTokenEnd;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	74bb      	strb	r3, [r7, #18]
			if(f2 == NULL) {
 80004de:	6a3b      	ldr	r3, [r7, #32]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <parseE+0x9e>
				freeTree(f);
 80004e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004e6:	f7ff fe64 	bl	80001b2 <freeTree>
				return NULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e020      	b.n	8000530 <parseE+0xe0>
			}
			struct Node *ret = (struct Node *)malloc(sizeof(struct Node));
 80004ee:	2010      	movs	r0, #16
 80004f0:	f002 fbfe 	bl	8002cf0 <malloc>
 80004f4:	4603      	mov	r3, r0
 80004f6:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='+' ? ADD : SUB;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b2b      	cmp	r3, #43	; 0x2b
 80004fc:	d101      	bne.n	8000502 <parseE+0xb2>
 80004fe:	2201      	movs	r2, #1
 8000500:	e000      	b.n	8000504 <parseE+0xb4>
 8000502:	2202      	movs	r2, #2
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800050c:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	6a3a      	ldr	r2, [r7, #32]
 8000512:	60da      	str	r2, [r3, #12]
			f = ret;
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
	while(!nextToken(expression, filled, &nextTokenBeginTemp, &nextTokenEndTemp)) {
 8000518:	f107 0312 	add.w	r3, r7, #18
 800051c:	f107 0213 	add.w	r2, r7, #19
 8000520:	7af9      	ldrb	r1, [r7, #11]
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f000 f902 	bl	800072c <nextToken>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0ab      	beq.n	8000486 <parseE+0x36>
		else { // Problem that it nexts the next token here
			//return NULL;
			break;
		}
	}
	return f;
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000530:	4618      	mov	r0, r3
 8000532:	3728      	adds	r7, #40	; 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <parseT>:

// Assume there is T to parse in the expression
// If not, return NULL
//
// If there is one additional char, there is no error
struct Node *parseT(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b08c      	sub	sp, #48	; 0x30
 800053c:	af02      	add	r7, sp, #8
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	460b      	mov	r3, r1
 8000546:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 8000548:	7af9      	ldrb	r1, [r7, #11]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 f866 	bl	8000620 <parseF>
 8000554:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <parseT+0x28>
		return NULL;
 800055c:	2300      	movs	r3, #0
 800055e:	e05b      	b.n	8000618 <parseT+0xe0>
	
	uint8_t tokentype;
	uint32_t tokenVal;

	uint8_t nextTokenBeginTemp = *nextTokenBegin, nextTokenEndTemp = *nextTokenEnd;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	74fb      	strb	r3, [r7, #19]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	74bb      	strb	r3, [r7, #18]
	//!lastToken(filled, *nextTokenEnd)
	while(!nextToken(expression, filled, &nextTokenBeginTemp, &nextTokenEndTemp)) {
 800056c:	e048      	b.n	8000600 <parseT+0xc8>
		getToken(expression, nextTokenBeginTemp, nextTokenEndTemp, &tokentype, &tokenVal);
 800056e:	7cf9      	ldrb	r1, [r7, #19]
 8000570:	7cba      	ldrb	r2, [r7, #18]
 8000572:	f107 001b 	add.w	r0, r7, #27
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	4603      	mov	r3, r0
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f917 	bl	80007b2 <getToken>
		if(tokentype == 0) {
 8000584:	7efb      	ldrb	r3, [r7, #27]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d104      	bne.n	8000594 <parseT+0x5c>
			freeTree(f);
 800058a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800058c:	f7ff fe11 	bl	80001b2 <freeTree>
			return NULL;
 8000590:	2300      	movs	r3, #0
 8000592:	e041      	b.n	8000618 <parseT+0xe0>
		}
		if(tokenVal == '*' || tokenVal == '/') {
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	2b2a      	cmp	r3, #42	; 0x2a
 8000598:	d002      	beq.n	80005a0 <parseT+0x68>
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b2f      	cmp	r3, #47	; 0x2f
 800059e:	d13a      	bne.n	8000616 <parseT+0xde>
			*nextTokenBegin = nextTokenBeginTemp;
 80005a0:	7cfa      	ldrb	r2, [r7, #19]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	701a      	strb	r2, [r3, #0]
			*nextTokenEnd = nextTokenEndTemp;
 80005a6:	7cba      	ldrb	r2, [r7, #18]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
			struct Node *f2 = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80005ac:	7af9      	ldrb	r1, [r7, #11]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f834 	bl	8000620 <parseF>
 80005b8:	6238      	str	r0, [r7, #32]
			nextTokenBeginTemp = *nextTokenBegin;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	74fb      	strb	r3, [r7, #19]
			nextTokenEndTemp = *nextTokenEnd;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	74bb      	strb	r3, [r7, #18]
			if(f2 == NULL) {
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d104      	bne.n	80005d6 <parseT+0x9e>
				freeTree(f);
 80005cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005ce:	f7ff fdf0 	bl	80001b2 <freeTree>
				return NULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e020      	b.n	8000618 <parseT+0xe0>
			}
			struct Node *ret = (struct Node *)malloc(sizeof(struct Node));
 80005d6:	2010      	movs	r0, #16
 80005d8:	f002 fb8a 	bl	8002cf0 <malloc>
 80005dc:	4603      	mov	r3, r0
 80005de:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='*' ? MULT : DIV;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b2a      	cmp	r3, #42	; 0x2a
 80005e4:	d101      	bne.n	80005ea <parseT+0xb2>
 80005e6:	2203      	movs	r2, #3
 80005e8:	e000      	b.n	80005ec <parseT+0xb4>
 80005ea:	2204      	movs	r2, #4
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f4:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	6a3a      	ldr	r2, [r7, #32]
 80005fa:	60da      	str	r2, [r3, #12]
			f = ret;
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
	while(!nextToken(expression, filled, &nextTokenBeginTemp, &nextTokenEndTemp)) {
 8000600:	f107 0312 	add.w	r3, r7, #18
 8000604:	f107 0213 	add.w	r2, r7, #19
 8000608:	7af9      	ldrb	r1, [r7, #11]
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f000 f88e 	bl	800072c <nextToken>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0ab      	beq.n	800056e <parseT+0x36>
		else {
			//return NULL;
			break;
		}
	}
	return f;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8000618:	4618      	mov	r0, r3
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <parseF>:
// It should parse factor as much as it can
// expression length >= 0
// filled is in [0, expression length]
// *nextTokenBegin is in [0, filled-1]
// *nextTokenBegin is in [0, filled]
struct Node *parseF(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af02      	add	r7, sp, #8
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	460b      	mov	r3, r1
 800062e:	72fb      	strb	r3, [r7, #11]
	if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))// this should be called by parseT
 8000630:	7af9      	ldrb	r1, [r7, #11]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f878 	bl	800072c <nextToken>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <parseF+0x26>
		return NULL;
 8000642:	2300      	movs	r3, #0
 8000644:	e06e      	b.n	8000724 <parseF+0x104>
	uint8_t tokentype;
	uint32_t tokenVal;
	getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7819      	ldrb	r1, [r3, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	f107 0017 	add.w	r0, r7, #23
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4603      	mov	r3, r0
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f8a9 	bl	80007b2 <getToken>
	if(tokentype == 0) {
 8000660:	7dfb      	ldrb	r3, [r7, #23]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d112      	bne.n	800068c <parseF+0x6c>
		struct Node *ret = (struct Node *)malloc(sizeof(struct Node));
 8000666:	2010      	movs	r0, #16
 8000668:	f002 fb42 	bl	8002cf0 <malloc>
 800066c:	4603      	mov	r3, r0
 800066e:	61bb      	str	r3, [r7, #24]
		ret->type = NUMBER;
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
		ret->value = tokenVal;
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	605a      	str	r2, [r3, #4]
		ret->lNode = NULL;
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
		ret->rNode = NULL;
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
		return ret;
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	e04b      	b.n	8000724 <parseF+0x104>
	}
	else if(tokenVal == '(') {
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b28      	cmp	r3, #40	; 0x28
 8000690:	d128      	bne.n	80006e4 <parseF+0xc4>
		//nextToken(expression, filled, nextTokenBegin, nextTokenEnd);
		struct Node *r = parseE(expression, filled, nextTokenBegin, nextTokenEnd);
 8000692:	7af9      	ldrb	r1, [r7, #11]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fed9 	bl	8000450 <parseE>
 800069e:	61f8      	str	r0, [r7, #28]
		if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))
 80006a0:	7af9      	ldrb	r1, [r7, #11]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f840 	bl	800072c <nextToken>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <parseF+0x96>
			return NULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e036      	b.n	8000724 <parseF+0x104>
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7819      	ldrb	r1, [r3, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	f107 0017 	add.w	r0, r7, #23
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4603      	mov	r3, r0
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 f871 	bl	80007b2 <getToken>
		if(tokentype == 1 && tokenVal == ')')
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d104      	bne.n	80006e0 <parseF+0xc0>
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b29      	cmp	r3, #41	; 0x29
 80006da:	d101      	bne.n	80006e0 <parseF+0xc0>
			return r;
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	e021      	b.n	8000724 <parseF+0x104>
		else 
			return NULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e01f      	b.n	8000724 <parseF+0x104>
	}
	else if(tokenVal == '-') {
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b2d      	cmp	r3, #45	; 0x2d
 80006e8:	d11b      	bne.n	8000722 <parseF+0x102>
		struct Node *r = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80006ea:	7af9      	ldrb	r1, [r7, #11]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff95 	bl	8000620 <parseF>
 80006f6:	6278      	str	r0, [r7, #36]	; 0x24
		if(r == NULL)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <parseF+0xe2>
			return NULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	e010      	b.n	8000724 <parseF+0x104>
		struct Node *ret = (struct Node *)malloc(sizeof(struct Node));
 8000702:	2010      	movs	r0, #16
 8000704:	f002 faf4 	bl	8002cf0 <malloc>
 8000708:	4603      	mov	r3, r0
 800070a:	623b      	str	r3, [r7, #32]
		ret->type = NEG;
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	2205      	movs	r2, #5
 8000710:	701a      	strb	r2, [r3, #0]
		ret->lNode = r;
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000716:	609a      	str	r2, [r3, #8]
		ret->rNode = NULL;
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
		return ret;
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	e000      	b.n	8000724 <parseF+0x104>
	}
	else {
		return NULL;
 8000722:	2300      	movs	r3, #0
	}
}
 8000724:	4618      	mov	r0, r3
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <nextToken>:
// *nextTokenBegin is in [0, filled-1] - not important
// *nextTokenBegin is in [0, filled]
// returns 1 when no more tokens
// return 0 when got a token

uint8_t nextToken(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	460b      	mov	r3, r1
 800073a:	72fb      	strb	r3, [r7, #11]
	if(*nextTokenEnd >= filled) 
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	7afa      	ldrb	r2, [r7, #11]
 8000742:	429a      	cmp	r2, r3
 8000744:	d801      	bhi.n	800074a <nextToken+0x1e>
		return 1;
 8000746:	2301      	movs	r3, #1
 8000748:	e02f      	b.n	80007aa <nextToken+0x7e>
	*nextTokenBegin=*nextTokenEnd;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	701a      	strb	r2, [r3, #0]
	if(isNum(expression[*nextTokenBegin])) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f877 	bl	8000852 <isNum>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d018      	beq.n	800079c <nextToken+0x70>
		while(++(*nextTokenEnd) < filled && isNum(expression[*nextTokenEnd]));
 800076a:	bf00      	nop
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7afa      	ldrb	r2, [r7, #11]
 800077e:	429a      	cmp	r2, r3
 8000780:	d912      	bls.n	80007a8 <nextToken+0x7c>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f85f 	bl	8000852 <isNum>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1e8      	bne.n	800076c <nextToken+0x40>
 800079a:	e005      	b.n	80007a8 <nextToken+0x7c>
	}
	else {
		++(*nextTokenEnd);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <getToken>:

uint8_t lastToken(uint8_t filled, uint8_t nextTokenEnd) {
	return nextTokenEnd >= filled;
};

uint8_t getToken(uint8_t *expression, uint8_t nextTokenBegin, uint8_t nextTokenEnd, uint8_t *tokenType, uint32_t *tokenVal) {
 80007b2:	b480      	push	{r7}
 80007b4:	b087      	sub	sp, #28
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	72fb      	strb	r3, [r7, #11]
 80007c0:	4613      	mov	r3, r2
 80007c2:	72bb      	strb	r3, [r7, #10]
	if(expression[nextTokenBegin] >= '0' && expression[nextTokenBegin] <= '9') {
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b2f      	cmp	r3, #47	; 0x2f
 80007ce:	d930      	bls.n	8000832 <getToken+0x80>
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b39      	cmp	r3, #57	; 0x39
 80007da:	d82a      	bhi.n	8000832 <getToken+0x80>
		*tokenType = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin]-48;
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3b30      	subs	r3, #48	; 0x30
 80007ec:	461a      	mov	r2, r3
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	3301      	adds	r3, #1
 80007f6:	75fb      	strb	r3, [r7, #23]
 80007f8:	e016      	b.n	8000828 <getToken+0x76>
			*tokenVal *= 10;
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	461a      	mov	r2, r3
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	601a      	str	r2, [r3, #0]
			*tokenVal += expression[i]-48;
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	7dfa      	ldrb	r2, [r7, #23]
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	440a      	add	r2, r1
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	4413      	add	r3, r2
 800081a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	3301      	adds	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	7dfa      	ldrb	r2, [r7, #23]
 800082a:	7abb      	ldrb	r3, [r7, #10]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3e4      	bcc.n	80007fa <getToken+0x48>
 8000830:	e009      	b.n	8000846 <getToken+0x94>
		}
	}
	else {
		*tokenType = 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin];
 8000838:	7afb      	ldrb	r3, [r7, #11]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	601a      	str	r2, [r3, #0]
	}
}
 8000846:	bf00      	nop
 8000848:	4618      	mov	r0, r3
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <isNum>:

uint8_t isNum(uint8_t ch) {
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	return ch >= '0' && ch <= '9';
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b2f      	cmp	r3, #47	; 0x2f
 8000860:	d904      	bls.n	800086c <isNum+0x1a>
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b39      	cmp	r3, #57	; 0x39
 8000866:	d801      	bhi.n	800086c <isNum+0x1a>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <isNum+0x1c>
 800086c:	2300      	movs	r3, #0
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <drawExpression>:

#include "gui.h"

#include "lcddisplay.h"

void drawExpression(uint8_t *expression, uint8_t cursor, uint8_t shift, uint8_t filled, uint8_t exprwidth, uint8_t screenwidth) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	4608      	mov	r0, r1
 8000884:	4611      	mov	r1, r2
 8000886:	461a      	mov	r2, r3
 8000888:	4603      	mov	r3, r0
 800088a:	70fb      	strb	r3, [r7, #3]
 800088c:	460b      	mov	r3, r1
 800088e:	70bb      	strb	r3, [r7, #2]
 8000890:	4613      	mov	r3, r2
 8000892:	707b      	strb	r3, [r7, #1]
	LCDsetCursorPos(0, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f9fe 	bl	8000c98 <LCDsetCursorPos>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 800089c:	78bb      	ldrb	r3, [r7, #2]
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e011      	b.n	80008c6 <drawExpression+0x4c>
	  if(i < exprwidth)
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	7e3b      	ldrb	r3, [r7, #24]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d207      	bcs.n	80008ba <drawExpression+0x40>
		  LCDwrite(expression[i]);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f9cc 	bl	8000c50 <LCDwrite>
 80008b8:	e002      	b.n	80008c0 <drawExpression+0x46>
	  else
		  LCDwrite(' ');
 80008ba:	2020      	movs	r0, #32
 80008bc:	f000 f9c8 	bl	8000c50 <LCDwrite>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3301      	adds	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	7bfa      	ldrb	r2, [r7, #15]
 80008c8:	78b9      	ldrb	r1, [r7, #2]
 80008ca:	7f3b      	ldrb	r3, [r7, #28]
 80008cc:	440b      	add	r3, r1
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbe7      	blt.n	80008a2 <drawExpression+0x28>
	}
	LCDsetCursorPos(0, cursor-shift);
 80008d2:	78fa      	ldrb	r2, [r7, #3]
 80008d4:	78bb      	ldrb	r3, [r7, #2]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 f9db 	bl	8000c98 <LCDsetCursorPos>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <drawMenu>:

void drawMenu(uint8_t page, uint8_t screenwidth, uint8_t (*pages)[3], uint8_t numofpages, uint8_t cursorScreen) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	603a      	str	r2, [r7, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	460b      	mov	r3, r1
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	4613      	mov	r3, r2
 8000900:	717b      	strb	r3, [r7, #5]
	LCDsetCursorPos(1, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2001      	movs	r0, #1
 8000906:	f000 f9c7 	bl	8000c98 <LCDsetCursorPos>
	uint8_t *t = "Page ";
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <drawMenu+0x9c>)
 800090c:	60fb      	str	r3, [r7, #12]
	LCDwriteText(t);
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f9ad 	bl	8000c6e <LCDwriteText>
	LCDwrite(page + 48);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	3330      	adds	r3, #48	; 0x30
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f998 	bl	8000c50 <LCDwrite>
	LCDwrite(' ');
 8000920:	2020      	movs	r0, #32
 8000922:	f000 f995 	bl	8000c50 <LCDwrite>
	LCDwrite(' ');
 8000926:	2020      	movs	r0, #32
 8000928:	f000 f992 	bl	8000c50 <LCDwrite>
	LCDwrite(pages[page][0]);
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f988 	bl	8000c50 <LCDwrite>
	LCDwrite(' ');
 8000940:	2020      	movs	r0, #32
 8000942:	f000 f985 	bl	8000c50 <LCDwrite>
	LCDwrite(pages[page][1]);
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f97b 	bl	8000c50 <LCDwrite>
	LCDwrite(' ');
 800095a:	2020      	movs	r0, #32
 800095c:	f000 f978 	bl	8000c50 <LCDwrite>
	LCDwrite(pages[page][2]);
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	4413      	add	r3, r2
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f96e 	bl	8000c50 <LCDwrite>
	LCDsetCursorPos(0, cursorScreen);
 8000974:	7e3b      	ldrb	r3, [r7, #24]
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f98d 	bl	8000c98 <LCDsetCursorPos>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08002f98 	.word	0x08002f98

0800098c <addChar>:

void addChar(uint8_t *expression, uint8_t (*pages)[3], uint8_t page, uint8_t button, uint8_t *cursor, uint8_t *shift, uint8_t *filled, uint8_t exprwidth, uint8_t screenwidth) {
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	460b      	mov	r3, r1
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	4613      	mov	r3, r2
 80009a0:	71bb      	strb	r3, [r7, #6]
	if(*filled >= exprwidth)
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d93f      	bls.n	8000a2e <addChar+0xa2>
		return;
	for(uint8_t i = *filled; i > *cursor; --i) {
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	75fb      	strb	r3, [r7, #23]
 80009b4:	e00b      	b.n	80009ce <addChar+0x42>
		expression[i] = expression[i-1];
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	441a      	add	r2, r3
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	68f9      	ldr	r1, [r7, #12]
 80009c2:	440b      	add	r3, r1
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = *filled; i > *cursor; --i) {
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	75fb      	strb	r3, [r7, #23]
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	7dfa      	ldrb	r2, [r7, #23]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8ee      	bhi.n	80009b6 <addChar+0x2a>
	}
	expression[*cursor] = pages[page][button];
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	18d1      	adds	r1, r2, r3
 80009e4:	79ba      	ldrb	r2, [r7, #6]
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4403      	add	r3, r0
 80009f0:	5c8a      	ldrb	r2, [r1, r2]
 80009f2:	701a      	strb	r2, [r3, #0]
	++(*filled);
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	701a      	strb	r2, [r3, #0]
	++(*cursor);
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a16:	4413      	add	r3, r2
 8000a18:	6a3a      	ldr	r2, [r7, #32]
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dc07      	bgt.n	8000a30 <addChar+0xa4>
		++(*shift);
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e000      	b.n	8000a30 <addChar+0xa4>
		return;
 8000a2e:	bf00      	nop
}
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <moveLeft>:

void moveLeft(uint8_t filled, uint8_t *cursor, uint8_t *shift) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	73fb      	strb	r3, [r7, #15]
	if(*cursor > 0)
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <moveLeft+0x22>
		--(*cursor);
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	701a      	strb	r2, [r3, #0]
	if(*shift > *cursor)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d905      	bls.n	8000a72 <moveLeft+0x3a>
		--(*shift);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	701a      	strb	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <moveRight>:

void moveRight(uint8_t filled, uint8_t *cursor, uint8_t *shift, uint8_t screenwidth) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4603      	mov	r3, r0
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	73bb      	strb	r3, [r7, #14]
	if(*cursor < filled)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d905      	bls.n	8000aa6 <moveRight+0x2a>
		++(*cursor);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	4413      	add	r3, r2
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	dc05      	bgt.n	8000ac4 <moveRight+0x48>
		++(*shift);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	701a      	strb	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <nextPage>:

void nextPage(uint8_t *page, uint8_t numofpages) {
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	++(*page);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	701a      	strb	r2, [r3, #0]
	(*page)%=numofpages;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	78fa      	ldrb	r2, [r7, #3]
 8000aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8000af0:	fb01 f202 	mul.w	r2, r1, r2
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	701a      	strb	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <LCDsend_>:
#include "stm32f1xx_hal.h"

#include "lcddisplay.h"

// Should add 100us delay right after control byte and right after data byte
void LCDsend_(uint8_t control, uint8_t data, uint8_t delay) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	460b      	mov	r3, r1
 8000b14:	71bb      	strb	r3, [r7, #6]
 8000b16:	4613      	mov	r3, r2
 8000b18:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDADDR<<1, toSend, 2, HAL_MAX_DELAY);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <LCDsend_+0x40>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	f107 020c 	add.w	r2, r7, #12
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2302      	movs	r3, #2
 8000b32:	217c      	movs	r1, #124	; 0x7c
 8000b34:	f001 f988 	bl	8001e48 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fd48 	bl	80015d0 <HAL_Delay>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000008c 	.word	0x2000008c

08000b4c <LCDBacklightsend_>:

// Maybe rewrite using one function
void LCDBacklightsend_(uint8_t control, uint8_t data, uint8_t delay) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	733b      	strb	r3, [r7, #12]
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDBACKLIGHTADDR<<1, toSend, 2, HAL_MAX_DELAY);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <LCDBacklightsend_+0x40>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f107 020c 	add.w	r2, r7, #12
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2302      	movs	r3, #2
 8000b76:	21d6      	movs	r1, #214	; 0xd6
 8000b78:	f001 f966 	bl	8001e48 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000b7c:	797b      	ldrb	r3, [r7, #5]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd26 	bl	80015d0 <HAL_Delay>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <LCDinit>:

void LCDinit(I2C_HandleTypeDef *hi2c1Ptr__) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	hi2c1Ptr_ = hi2c1Ptr__;
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <LCDinit+0xb0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]

	LCDdisplayOn_ = 1;
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <LCDinit+0xb4>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
	LCDcursorOn_ = 0;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <LCDinit+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
	LCDblinkOn_ = 0;
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <LCDinit+0xbc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

	HAL_Delay(50);
 8000bb0:	2032      	movs	r0, #50	; 0x32
 8000bb2:	f000 fd0d 	bl	80015d0 <HAL_Delay>
	LCDsend_(COMMAND, 0x28, 5);
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	2128      	movs	r1, #40	; 0x28
 8000bba:	2080      	movs	r0, #128	; 0x80
 8000bbc:	f7ff ffa4 	bl	8000b08 <LCDsend_>
	LCDsend_(COMMAND, 0x0C, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	210c      	movs	r1, #12
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	f7ff ff9f 	bl	8000b08 <LCDsend_>
	LCDsend_(COMMAND, 0x01, 2);
 8000bca:	2202      	movs	r2, #2
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2080      	movs	r0, #128	; 0x80
 8000bd0:	f7ff ff9a 	bl	8000b08 <LCDsend_>
	LCDsend_(COMMAND, 0x06, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2106      	movs	r1, #6
 8000bd8:	2080      	movs	r0, #128	; 0x80
 8000bda:	f7ff ff95 	bl	8000b08 <LCDsend_>

	LCDBacklightsend_(0x2F, 0x00, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	202f      	movs	r0, #47	; 0x2f
 8000be4:	f7ff ffb2 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x00, 0x20, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ffad 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x01, 0x00, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ffa8 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x02, 0x01, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff ffa3 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x03, 4, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f7ff ff9e 	bl	8000b4c <LCDBacklightsend_>

	LCDBacklightsend_(0x06, 255, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	2006      	movs	r0, #6
 8000c16:	f7ff ff99 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x05, 255, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	21ff      	movs	r1, #255	; 0xff
 8000c1e:	2005      	movs	r0, #5
 8000c20:	f7ff ff94 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x04, 255, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f7ff ff8f 	bl	8000b4c <LCDBacklightsend_>
	LCDBacklightsend_(0x07, 0xFF, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	21ff      	movs	r1, #255	; 0xff
 8000c32:	2007      	movs	r0, #7
 8000c34:	f7ff ff8a 	bl	8000b4c <LCDBacklightsend_>

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000008c 	.word	0x2000008c
 8000c44:	20000090 	.word	0x20000090
 8000c48:	20000091 	.word	0x20000091
 8000c4c:	20000092 	.word	0x20000092

08000c50 <LCDwrite>:

void LCDwrite(uint8_t ch) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	LCDsend_(DATA, ch, 1);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2040      	movs	r0, #64	; 0x40
 8000c62:	f7ff ff51 	bl	8000b08 <LCDsend_>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LCDwriteText>:

void LCDwriteText(uint8_t *text) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	while(*text != '\0') LCDwrite(*text++);
 8000c76:	e006      	b.n	8000c86 <LCDwriteText+0x18>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffe5 	bl	8000c50 <LCDwrite>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f4      	bne.n	8000c78 <LCDwriteText+0xa>
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LCDsetCursorPos>:

void LCDsetCursorPos(uint8_t row, uint8_t col) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
	LCDsend_(COMMAND, 0x80 | col | (row==0 ? 0x00 : 0x40), 1);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <LCDsetCursorPos+0x1a>
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e000      	b.n	8000cb4 <LCDsetCursorPos+0x1c>
 8000cb2:	2240      	movs	r2, #64	; 0x40
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2080      	movs	r0, #128	; 0x80
 8000cc6:	f7ff ff1f 	bl	8000b08 <LCDsend_>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <LCDsetCursor>:

void LCDsetDisplay(uint8_t isOn) {
	LCDdisplayOn_ = isOn;
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
}
void LCDsetCursor(uint8_t isOn) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	LCDcursorOn_ = isOn;
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <LCDsetCursor+0x48>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <LCDsetCursor+0x4c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LCDsetCursor+0x48>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <LCDsetCursor+0x50>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2080      	movs	r0, #128	; 0x80
 8000d10:	f7ff fefa 	bl	8000b08 <LCDsend_>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000091 	.word	0x20000091
 8000d20:	20000090 	.word	0x20000090
 8000d24:	20000092 	.word	0x20000092

08000d28 <LCDsetBlink>:
void LCDsetBlink(uint8_t isOn) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	LCDblinkOn_ = isOn;
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <LCDsetBlink+0x48>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <LCDsetBlink+0x4c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <LCDsetBlink+0x50>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <LCDsetBlink+0x48>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	2080      	movs	r0, #128	; 0x80
 8000d64:	f7ff fed0 	bl	8000b08 <LCDsend_>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000092 	.word	0x20000092
 8000d74:	20000090 	.word	0x20000090
 8000d78:	20000091 	.word	0x20000091

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d82:	f000 fbc3 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d86:	f000 f889 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8a:	f000 f8f1 	bl	8000f70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8e:	f000 f8c1 	bl	8000f14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //stm32f103c6t6a

  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000d92:	2300      	movs	r3, #0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e006      	b.n	8000da6 <main+0x2a>
	  expression[i] = ' ';
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <main+0xf4>)
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3301      	adds	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b1f      	cmp	r3, #31
 8000daa:	d9f5      	bls.n	8000d98 <main+0x1c>

  /*expression[0] = 'a';
  expression[1] = 'b';*/
  cursor = 0;
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <main+0xf8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
  filled = 0;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <main+0xfc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  shift = 0;
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <main+0x100>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]

  buttonbeingpressed = 0;
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <main+0x104>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]

  LCDinit(&hi2c1);
 8000dc4:	482f      	ldr	r0, [pc, #188]	; (8000e84 <main+0x108>)
 8000dc6:	f7ff fee3 	bl	8000b90 <LCDinit>
  LCDwrite('s');
 8000dca:	2073      	movs	r0, #115	; 0x73
 8000dcc:	f7ff ff40 	bl	8000c50 <LCDwrite>
  LCDwrite('t');
 8000dd0:	2074      	movs	r0, #116	; 0x74
 8000dd2:	f7ff ff3d 	bl	8000c50 <LCDwrite>
  LCDsetCursorPos(0, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff ff5d 	bl	8000c98 <LCDsetCursorPos>
  LCDsetCursor(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ff78 	bl	8000cd4 <LCDsetCursor>
  LCDsetBlink(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff9f 	bl	8000d28 <LCDsetBlink>
  redraw = 1;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <main+0x10c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
  redrawmenu = 1;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <main+0x110>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]

  uint32_t timerblink = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GetTick()-timerblink > 1000) {
 8000dfa:	f000 fbdf 	bl	80015bc <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e08:	d907      	bls.n	8000e1a <main+0x9e>
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8000e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0e:	4820      	ldr	r0, [pc, #128]	; (8000e90 <main+0x114>)
 8000e10:	f000 fea4 	bl	8001b5c <HAL_GPIO_TogglePin>
		timerblink = HAL_GetTick();
 8000e14:	f000 fbd2 	bl	80015bc <HAL_GetTick>
 8000e18:	6038      	str	r0, [r7, #0]
	}
	if(redraw) {
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <main+0x10c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00f      	beq.n	8000e42 <main+0xc6>
		redraw = 0;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <main+0x10c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
		drawExpression(expression, cursor, shift, filled, EXPRWIDTH, SCREENWIDTH);
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <main+0xf8>)
 8000e2a:	7819      	ldrb	r1, [r3, #0]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <main+0x100>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <main+0xfc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2010      	movs	r0, #16
 8000e36:	9001      	str	r0, [sp, #4]
 8000e38:	2020      	movs	r0, #32
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <main+0xf4>)
 8000e3e:	f7ff fd1c 	bl	800087a <drawExpression>
	}
	if(redrawmenu) {
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <main+0x110>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0d7      	beq.n	8000dfa <main+0x7e>
		redrawmenu = 0;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <main+0x110>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
		drawMenu(page, SCREENWIDTH, pages, NUMOFPAGES, cursor-shift);
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <main+0x118>)
 8000e52:	7818      	ldrb	r0, [r3, #0]
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <main+0xf8>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <main+0x100>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2306      	movs	r3, #6
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <main+0x11c>)
 8000e66:	2110      	movs	r1, #16
 8000e68:	f7ff fd40 	bl	80008ec <drawMenu>
	if(HAL_GetTick()-timerblink > 1000) {
 8000e6c:	e7c5      	b.n	8000dfa <main+0x7e>
 8000e6e:	bf00      	nop
 8000e70:	200000ec 	.word	0x200000ec
 8000e74:	2000010c 	.word	0x2000010c
 8000e78:	2000010e 	.word	0x2000010e
 8000e7c:	2000010d 	.word	0x2000010d
 8000e80:	20000111 	.word	0x20000111
 8000e84:	20000094 	.word	0x20000094
 8000e88:	2000010f 	.word	0x2000010f
 8000e8c:	20000110 	.word	0x20000110
 8000e90:	40011000 	.word	0x40011000
 8000e94:	200000e8 	.word	0x200000e8
 8000e98:	20000000 	.word	0x20000000

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b090      	sub	sp, #64	; 0x40
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2228      	movs	r2, #40	; 0x28
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ffdc 	bl	8002e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fb10 	bl	80024f8 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ede:	f000 f9e1 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fd7e 	bl	80029fc <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f06:	f000 f9cd 	bl	80012a4 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3740      	adds	r7, #64	; 0x40
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_I2C1_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C1_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f52:	f000 fe35 	bl	8001bc0 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 f9a2 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000094 	.word	0x20000094
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	4b42      	ldr	r3, [pc, #264]	; (8001090 <MX_GPIO_Init+0x120>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a41      	ldr	r2, [pc, #260]	; (8001090 <MX_GPIO_Init+0x120>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <MX_GPIO_Init+0x120>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_GPIO_Init+0x120>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <MX_GPIO_Init+0x120>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_GPIO_Init+0x120>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_GPIO_Init+0x120>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a35      	ldr	r2, [pc, #212]	; (8001090 <MX_GPIO_Init+0x120>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_GPIO_Init+0x120>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4830      	ldr	r0, [pc, #192]	; (8001094 <MX_GPIO_Init+0x124>)
 8000fd4:	f000 fdaa 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDPCB_Pin */
  GPIO_InitStruct.Pin = LEDPCB_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDPCB_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4828      	ldr	r0, [pc, #160]	; (8001094 <MX_GPIO_Init+0x124>)
 8000ff2:	f000 fc1f 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDCHBUTTON_Pin LEFTBUTTON_Pin RIGHTBUTTON_Pin MENUBUTTON_Pin
                           ADDCH1BUTTON_Pin ADDCH2BUTTON_Pin EQBUTTON_Pin */
  GPIO_InitStruct.Pin = ADDCHBUTTON_Pin|LEFTBUTTON_Pin|RIGHTBUTTON_Pin|MENUBUTTON_Pin
 8000ff6:	23fd      	movs	r3, #253	; 0xfd
 8000ff8:	613b      	str	r3, [r7, #16]
                          |ADDCH1BUTTON_Pin|ADDCH2BUTTON_Pin|EQBUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_GPIO_Init+0x128>)
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4619      	mov	r1, r3
 8001008:	4824      	ldr	r0, [pc, #144]	; (800109c <MX_GPIO_Init+0x12c>)
 800100a:	f000 fc13 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKBUTTON_Pin */
  GPIO_InitStruct.Pin = BACKBUTTON_Pin;
 800100e:	2302      	movs	r3, #2
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_GPIO_Init+0x128>)
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BACKBUTTON_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <MX_GPIO_Init+0x130>)
 8001022:	f000 fc07 	bl	8001834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2006      	movs	r0, #6
 800102c:	f000 fbcb 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001030:	2006      	movs	r0, #6
 8001032:	f000 fbe4 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2007      	movs	r0, #7
 800103c:	f000 fbc3 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001040:	2007      	movs	r0, #7
 8001042:	f000 fbdc 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2008      	movs	r0, #8
 800104c:	f000 fbbb 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001050:	2008      	movs	r0, #8
 8001052:	f000 fbd4 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2009      	movs	r0, #9
 800105c:	f000 fbb3 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001060:	2009      	movs	r0, #9
 8001062:	f000 fbcc 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200a      	movs	r0, #10
 800106c:	f000 fbab 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 fbc4 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2017      	movs	r0, #23
 800107c:	f000 fba3 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001080:	2017      	movs	r0, #23
 8001082:	f000 fbbc 	bl	80017fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	40011000 	.word	0x40011000
 8001098:	10110000 	.word	0x10110000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00

080010a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af06      	add	r7, sp, #24
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	if(buttonbeingpressed)
 80010ae:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_GPIO_EXTI_Callback+0x1d8>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 80dd 	bne.w	8001272 <HAL_GPIO_EXTI_Callback+0x1ce>
		return;
	buttonbeingpressed=1;
 80010b8:	4b70      	ldr	r3, [pc, #448]	; (800127c <HAL_GPIO_EXTI_Callback+0x1d8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin) {
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	f000 80c2 	beq.w	800124a <HAL_GPIO_EXTI_Callback+0x1a6>
 80010c6:	2b80      	cmp	r3, #128	; 0x80
 80010c8:	f300 80cf 	bgt.w	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	dc49      	bgt.n	8001164 <HAL_GPIO_EXTI_Callback+0xc0>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f340 80ca 	ble.w	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
 80010d6:	3b01      	subs	r3, #1
 80010d8:	2b1f      	cmp	r3, #31
 80010da:	f200 80c6 	bhi.w	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	0800116b 	.word	0x0800116b
 80010e8:	08001243 	.word	0x08001243
 80010ec:	0800126b 	.word	0x0800126b
 80010f0:	08001207 	.word	0x08001207
 80010f4:	0800126b 	.word	0x0800126b
 80010f8:	0800126b 	.word	0x0800126b
 80010fc:	0800126b 	.word	0x0800126b
 8001100:	0800121d 	.word	0x0800121d
 8001104:	0800126b 	.word	0x0800126b
 8001108:	0800126b 	.word	0x0800126b
 800110c:	0800126b 	.word	0x0800126b
 8001110:	0800126b 	.word	0x0800126b
 8001114:	0800126b 	.word	0x0800126b
 8001118:	0800126b 	.word	0x0800126b
 800111c:	0800126b 	.word	0x0800126b
 8001120:	08001233 	.word	0x08001233
 8001124:	0800126b 	.word	0x0800126b
 8001128:	0800126b 	.word	0x0800126b
 800112c:	0800126b 	.word	0x0800126b
 8001130:	0800126b 	.word	0x0800126b
 8001134:	0800126b 	.word	0x0800126b
 8001138:	0800126b 	.word	0x0800126b
 800113c:	0800126b 	.word	0x0800126b
 8001140:	0800126b 	.word	0x0800126b
 8001144:	0800126b 	.word	0x0800126b
 8001148:	0800126b 	.word	0x0800126b
 800114c:	0800126b 	.word	0x0800126b
 8001150:	0800126b 	.word	0x0800126b
 8001154:	0800126b 	.word	0x0800126b
 8001158:	0800126b 	.word	0x0800126b
 800115c:	0800126b 	.word	0x0800126b
 8001160:	0800119f 	.word	0x0800119f
 8001164:	2b40      	cmp	r3, #64	; 0x40
 8001166:	d034      	beq.n	80011d2 <HAL_GPIO_EXTI_Callback+0x12e>
 8001168:	e07f      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCHBUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	4844      	ldr	r0, [pc, #272]	; (8001280 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001170:	f000 fcf4 	bl	8001b5c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 0, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2310      	movs	r3, #16
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	2320      	movs	r3, #32
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	4941      	ldr	r1, [pc, #260]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001190:	4841      	ldr	r0, [pc, #260]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001192:	f7ff fbfb 	bl	800098c <addChar>
    	redraw = 1;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		break;
 800119c:	e065      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH1BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	4837      	ldr	r0, [pc, #220]	; (8001280 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80011a4:	f000 fcda 	bl	8001b5c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 1, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	2310      	movs	r3, #16
 80011ae:	9304      	str	r3, [sp, #16]
 80011b0:	2320      	movs	r3, #32
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011c4:	4834      	ldr	r0, [pc, #208]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80011c6:	f7ff fbe1 	bl	800098c <addChar>
    	redraw = 1;
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		break;
 80011d0:	e04b      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH2BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 80011d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d6:	482a      	ldr	r0, [pc, #168]	; (8001280 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80011d8:	f000 fcc0 	bl	8001b5c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 2, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	2310      	movs	r3, #16
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	2320      	movs	r3, #32
 80011e6:	9303      	str	r3, [sp, #12]
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2302      	movs	r3, #2
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011f8:	4827      	ldr	r0, [pc, #156]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80011fa:	f7ff fbc7 	bl	800098c <addChar>
    	redraw = 1;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
		break;
 8001204:	e031      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case LEFTBUTTON_Pin:
		moveLeft(filled, &cursor, &shift);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 800120c:	4920      	ldr	r1, [pc, #128]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fc12 	bl	8000a38 <moveLeft>
		redraw = 1;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
		break;
 800121a:	e026      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case RIGHTBUTTON_Pin:
		moveRight(filled, &cursor, &shift, SCREENWIDTH);
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800121e:	7818      	ldrb	r0, [r3, #0]
 8001220:	2310      	movs	r3, #16
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001224:	491a      	ldr	r1, [pc, #104]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001226:	f7ff fc29 	bl	8000a7c <moveRight>
		redraw = 1;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
		break;
 8001230:	e01b      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case MENUBUTTON_Pin:
		nextPage(&page, NUMOFPAGES);
 8001232:	2106      	movs	r1, #6
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001236:	f7ff fc4a 	bl	8000ace <nextPage>
		redrawmenu = 1;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
		break;
 8001240:	e013      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case BACKBUTTON_Pin:
		redraw = 1;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		break;
 8001248:	e00f      	b.n	800126a <HAL_GPIO_EXTI_Callback+0x1c6>
	case EQBUTTON_Pin:
		computeEquation(expression, &filled, EXPRWIDTH);
 800124a:	2220      	movs	r2, #32
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001250:	f7fe ff7c 	bl	800014c <computeEquation>
		cursor=filled;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800125a:	701a      	strb	r2, [r3, #0]
		shift=0;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_GPIO_EXTI_Callback+0x1e8>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
		redraw = 1;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
		break;
 8001268:	bf00      	nop
	}
	buttonbeingpressed=0;
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_GPIO_EXTI_Callback+0x1d8>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e000      	b.n	8001274 <HAL_GPIO_EXTI_Callback+0x1d0>
		return;
 8001272:	bf00      	nop
}
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000111 	.word	0x20000111
 8001280:	40011000 	.word	0x40011000
 8001284:	200000e8 	.word	0x200000e8
 8001288:	2000010e 	.word	0x2000010e
 800128c:	2000010d 	.word	0x2000010d
 8001290:	2000010c 	.word	0x2000010c
 8001294:	20000000 	.word	0x20000000
 8001298:	200000ec 	.word	0x200000ec
 800129c:	2000010f 	.word	0x2000010f
 80012a0:	20000110 	.word	0x20000110

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_MspInit+0x40>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_MspInit+0x40>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x40>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_MspInit+0x40>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_MspInit+0x40>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_MspInit+0x40>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_I2C_MspInit+0x94>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d134      	bne.n	800137e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_I2C_MspInit+0x98>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_I2C_MspInit+0x98>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_I2C_MspInit+0x98>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <HAL_I2C_MspInit+0x9c>)
 8001346:	f000 fa75 	bl	8001834 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_I2C_MspInit+0xa0>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_I2C_MspInit+0xa0>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_I2C_MspInit+0x98>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_I2C_MspInit+0x98>)
 800136c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_I2C_MspInit+0x98>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40005400 	.word	0x40005400
 800138c:	40021000 	.word	0x40021000
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40010000 	.word	0x40010000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 f8db 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCHBUTTON_Pin);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 fbd0 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BACKBUTTON_Pin);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 fbc9 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}

08001402 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFTBUTTON_Pin);
 8001406:	2004      	movs	r0, #4
 8001408:	f000 fbc2 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHTBUTTON_Pin);
 8001414:	2008      	movs	r0, #8
 8001416:	f000 fbbb 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}

0800141e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENUBUTTON_Pin);
 8001422:	2010      	movs	r0, #16
 8001424:	f000 fbb4 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCH1BUTTON_Pin);
 8001430:	2020      	movs	r0, #32
 8001432:	f000 fbad 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADDCH2BUTTON_Pin);
 8001436:	2040      	movs	r0, #64	; 0x40
 8001438:	f000 fbaa 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EQBUTTON_Pin);
 800143c:	2080      	movs	r0, #128	; 0x80
 800143e:	f000 fba7 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f001 fd0e 	bl	8002e98 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20002800 	.word	0x20002800
 80014a8:	00000400 	.word	0x00000400
 80014ac:	20000114 	.word	0x20000114
 80014b0:	20000268 	.word	0x20000268

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c0:	f7ff fff8 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014c6:	490c      	ldr	r1, [pc, #48]	; (80014f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014dc:	4c09      	ldr	r4, [pc, #36]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 fcdb 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ee:	f7ff fc45 	bl	8000d7c <main>
  bx lr
 80014f2:	4770      	bx	lr
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014fc:	08002fd4 	.word	0x08002fd4
  ldr r2, =_sbss
 8001500:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001504:	20000264 	.word	0x20000264

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f947 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fec2 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f95f 	bl	800181a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001574:	f000 f927 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000014 	.word	0x20000014
 8001590:	2000001c 	.word	0x2000001c
 8001594:	20000018 	.word	0x20000018

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <HAL_IncTick+0x20>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	2000001c 	.word	0x2000001c
 80015b8:	20000118 	.word	0x20000118

080015bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_GetTick+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000118 	.word	0x20000118

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff fff0 	bl	80015bc <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffe0 	bl	80015bc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000001c 	.word	0x2000001c

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <__NVIC_EnableIRQ+0x34>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001790:	f7ff ff90 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff2d 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff42 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e161      	b.n	8001b0c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8150 	bne.w	8001b06 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a97      	ldr	r2, [pc, #604]	; (8001ac8 <HAL_GPIO_Init+0x294>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a95      	ldr	r2, [pc, #596]	; (8001ac8 <HAL_GPIO_Init+0x294>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a95      	ldr	r2, [pc, #596]	; (8001acc <HAL_GPIO_Init+0x298>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a93      	ldr	r2, [pc, #588]	; (8001acc <HAL_GPIO_Init+0x298>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a93      	ldr	r2, [pc, #588]	; (8001ad0 <HAL_GPIO_Init+0x29c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a91      	ldr	r2, [pc, #580]	; (8001ad0 <HAL_GPIO_Init+0x29c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a91      	ldr	r2, [pc, #580]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a8f      	ldr	r2, [pc, #572]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a8f      	ldr	r2, [pc, #572]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a8d      	ldr	r2, [pc, #564]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a76      	ldr	r2, [pc, #472]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a9 	beq.w	8001b06 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a45      	ldr	r2, [pc, #276]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00d      	beq.n	8001a14 <HAL_GPIO_Init+0x1e0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_Init+0x1dc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_GPIO_Init+0x1d8>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	492b      	ldr	r1, [pc, #172]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4921      	ldr	r1, [pc, #132]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	491d      	ldr	r1, [pc, #116]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4917      	ldr	r1, [pc, #92]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4913      	ldr	r1, [pc, #76]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01f      	beq.n	8001af8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	490d      	ldr	r1, [pc, #52]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e01f      	b.n	8001b06 <HAL_GPIO_Init+0x2d2>
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4909      	ldr	r1, [pc, #36]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae96 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	372c      	adds	r7, #44	; 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43d9      	mvns	r1, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa78 	bl	80010a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e12b      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fb84 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2224      	movs	r2, #36	; 0x24
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c24:	f001 f832 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a81      	ldr	r2, [pc, #516]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d807      	bhi.n	8001c44 <HAL_I2C_Init+0x84>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a80      	ldr	r2, [pc, #512]	; (8001e38 <HAL_I2C_Init+0x278>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e006      	b.n	8001c52 <HAL_I2C_Init+0x92>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a7d      	ldr	r2, [pc, #500]	; (8001e3c <HAL_I2C_Init+0x27c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0e7      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a78      	ldr	r2, [pc, #480]	; (8001e40 <HAL_I2C_Init+0x280>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9b      	lsrs	r3, r3, #18
 8001c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d802      	bhi.n	8001c94 <HAL_I2C_Init+0xd4>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	e009      	b.n	8001ca8 <HAL_I2C_Init+0xe8>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_I2C_Init+0x284>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	495c      	ldr	r1, [pc, #368]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001cc4:	428b      	cmp	r3, r1
 8001cc6:	d819      	bhi.n	8001cfc <HAL_I2C_Init+0x13c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e59      	subs	r1, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd6:	1c59      	adds	r1, r3, #1
 8001cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cdc:	400b      	ands	r3, r1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_I2C_Init+0x138>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e59      	subs	r1, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	e051      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e04f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <HAL_I2C_Init+0x168>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e58      	subs	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e012      	b.n	8001d4e <HAL_I2C_Init+0x18e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1e58      	subs	r0, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	0099      	lsls	r1, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Init+0x196>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e022      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10e      	bne.n	8001d7c <HAL_I2C_Init+0x1bc>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e58      	subs	r0, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6859      	ldr	r1, [r3, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	0099      	lsls	r1, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	6809      	ldr	r1, [r1, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6911      	ldr	r1, [r2, #16]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68d2      	ldr	r2, [r2, #12]
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	000186a0 	.word	0x000186a0
 8001e38:	001e847f 	.word	0x001e847f
 8001e3c:	003d08ff 	.word	0x003d08ff
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fbae 	bl	80015bc <HAL_GetTick>
 8001e60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	f040 80e0 	bne.w	8002030 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2319      	movs	r3, #25
 8001e76:	2201      	movs	r2, #1
 8001e78:	4970      	ldr	r1, [pc, #448]	; (800203c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f964 	bl	8002148 <I2C_WaitOnFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e0d3      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x50>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e0cc      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d007      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_I2C_Master_Transmit+0x1f8>)
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f89c 	bl	8002044 <I2C_MasterRequestWrite>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e08d      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f2c:	e066      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fa22 	bl	800237c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_I2C_Master_Transmit+0x188>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fa19 	bl	800240c <I2C_WaitOnBTFFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d107      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01a      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d194      	bne.n	8001f2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00100002 	.word	0x00100002
 8002040:	ffff0000 	.word	0xffff0000

08002044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d006      	beq.n	800206e <I2C_MasterRequestWrite+0x2a>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d003      	beq.n	800206e <I2C_MasterRequestWrite+0x2a>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800206c:	d108      	bne.n	8002080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e00b      	b.n	8002098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	2b12      	cmp	r3, #18
 8002086:	d107      	bne.n	8002098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f84f 	bl	8002148 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020be:	d103      	bne.n	80020c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e035      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d4:	d108      	bne.n	80020e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	e01b      	b.n	8002120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	11db      	asrs	r3, r3, #7
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 0306 	and.w	r3, r3, #6
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f063 030f 	orn	r3, r3, #15
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <I2C_MasterRequestWrite+0xfc>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f898 	bl	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e010      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <I2C_MasterRequestWrite+0x100>)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f888 	bl	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	00010008 	.word	0x00010008
 8002144:	00010002 	.word	0x00010002

08002148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002158:	e048      	b.n	80021ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002160:	d044      	beq.n	80021ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7ff fa2b 	bl	80015bc <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d302      	bcc.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d139      	bne.n	80021ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	e00c      	b.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d116      	bne.n	80021ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f043 0220 	orr.w	r2, r3, #32
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e023      	b.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0c1b      	lsrs	r3, r3, #16
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10d      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	e00c      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	43da      	mvns	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4013      	ands	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	429a      	cmp	r2, r3
 8002230:	d093      	beq.n	800215a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224a:	e071      	b.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225a:	d123      	bne.n	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f043 0204 	orr.w	r2, r3, #4
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e067      	b.n	8002374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022aa:	d041      	beq.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ac:	f7ff f986 	bl	80015bc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d302      	bcc.n	80022c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d136      	bne.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10c      	bne.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	e00b      	b.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e021      	b.n	8002374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10c      	bne.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e00b      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4013      	ands	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f af6d 	bne.w	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002388:	e034      	b.n	80023f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f886 	bl	800249c <I2C_IsAcknowledgeFailed>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e034      	b.n	8002404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a0:	d028      	beq.n	80023f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7ff f90b 	bl	80015bc <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11d      	bne.n	80023f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d016      	beq.n	80023f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e007      	b.n	8002404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d1c3      	bne.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002418:	e034      	b.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f83e 	bl	800249c <I2C_IsAcknowledgeFailed>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e034      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d028      	beq.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f8c3 	bl	80015bc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11d      	bne.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d016      	beq.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d1c3      	bne.n	800241a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d11b      	bne.n	80024ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e272      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002518:	4b92      	ldr	r3, [pc, #584]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b04      	cmp	r3, #4
 8002522:	d00c      	beq.n	800253e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002524:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d112      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
 8002530:	4b8c      	ldr	r3, [pc, #560]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d10b      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d06c      	beq.n	8002624 <HAL_RCC_OscConfig+0x12c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d168      	bne.n	8002624 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e24c      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x76>
 8002560:	4b80      	ldr	r3, [pc, #512]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e02e      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x98>
 8002576:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b78      	ldr	r3, [pc, #480]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0xbc>
 800259a:	4b72      	ldr	r3, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a71      	ldr	r2, [pc, #452]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 80025b4:	4b6b      	ldr	r3, [pc, #428]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6a      	ldr	r2, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fff2 	bl	80015bc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe ffee 	bl	80015bc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e200      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xe4>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe ffde 	bl	80015bc <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe ffda 	bl	80015bc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1ec      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x10c>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x18c>
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x176>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c0      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4939      	ldr	r1, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCC_OscConfig+0x270>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe ff93 	bl	80015bc <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe ff8f 	bl	80015bc <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a1      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x270>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe ff72 	bl	80015bc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe ff6e 	bl	80015bc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e180      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03a      	beq.n	800277c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d019      	beq.n	8002742 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_RCC_OscConfig+0x274>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe ff52 	bl	80015bc <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe ff4e 	bl	80015bc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e160      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f000 faba 	bl	8002cb4 <RCC_Delay>
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x274>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe ff38 	bl	80015bc <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	e00f      	b.n	8002770 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe ff34 	bl	80015bc <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d908      	bls.n	8002770 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e146      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	42420000 	.word	0x42420000
 800276c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e9      	bne.n	8002750 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a6 	beq.w	80028d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a87      	ldr	r2, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fef5 	bl	80015bc <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fef1 	bl	80015bc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e103      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b75      	ldr	r3, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x312>
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6213      	str	r3, [r2, #32]
 8002808:	e02d      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x334>
 8002812:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	e01c      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x356>
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a60      	ldr	r2, [pc, #384]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e00b      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800284e:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	6213      	str	r3, [r2, #32]
 800285a:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a57      	ldr	r2, [pc, #348]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d015      	beq.n	800289a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fea5 	bl	80015bc <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fea1 	bl	80015bc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0b1      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCC_OscConfig+0x37e>
 8002898:	e014      	b.n	80028c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe fe8f 	bl	80015bc <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fe8b 	bl	80015bc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e09b      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8087 	beq.w	80029ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d061      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d146      	bne.n	8002982 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe fe5f 	bl	80015bc <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fe5b 	bl	80015bc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e06d      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4921      	ldr	r1, [pc, #132]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a19      	ldr	r1, [r3, #32]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	430b      	orrs	r3, r1
 800294e:	491b      	ldr	r1, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fe2f 	bl	80015bc <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fe2b 	bl	80015bc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e03d      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x46a>
 8002980:	e035      	b.n	80029ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fe18 	bl	80015bc <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fe14 	bl	80015bc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e026      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x498>
 80029ae:	e01e      	b.n	80029ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e019      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x500>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0d0      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4965      	ldr	r1, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e073      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fd66 	bl	80015bc <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fd62 	bl	80015bc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e053      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d210      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4922      	ldr	r1, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fcc4 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08002fa0 	.word	0x08002fa0
 8002bc8:	20000014 	.word	0x20000014
 8002bcc:	20000018 	.word	0x20000018

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x30>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x36>
 8002bfe:	e027      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c02:	613b      	str	r3, [r7, #16]
      break;
 8002c04:	e027      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e004      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
      break;
 8002c4e:	e002      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c56:	693b      	ldr	r3, [r7, #16]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	007a1200 	.word	0x007a1200
 8002c6c:	08002fb8 	.word	0x08002fb8
 8002c70:	08002fc8 	.word	0x08002fc8
 8002c74:	003d0900 	.word	0x003d0900

08002c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000014 	.word	0x20000014

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c90:	f7ff fff2 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08002fb0 	.word	0x08002fb0

08002cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <RCC_Delay+0x34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <RCC_Delay+0x38>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a5b      	lsrs	r3, r3, #9
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd0:	bf00      	nop
  }
  while (Delay --);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <RCC_Delay+0x1c>
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <malloc>:
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <malloc+0xc>)
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f000 b82b 	b.w	8002d50 <_malloc_r>
 8002cfa:	bf00      	nop
 8002cfc:	2000006c 	.word	0x2000006c

08002d00 <free>:
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <free+0xc>)
 8002d02:	4601      	mov	r1, r0
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f000 b8f3 	b.w	8002ef0 <_free_r>
 8002d0a:	bf00      	nop
 8002d0c:	2000006c 	.word	0x2000006c

08002d10 <sbrk_aligned>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	4e0e      	ldr	r6, [pc, #56]	; (8002d4c <sbrk_aligned+0x3c>)
 8002d14:	460c      	mov	r4, r1
 8002d16:	6831      	ldr	r1, [r6, #0]
 8002d18:	4605      	mov	r5, r0
 8002d1a:	b911      	cbnz	r1, 8002d22 <sbrk_aligned+0x12>
 8002d1c:	f000 f8ac 	bl	8002e78 <_sbrk_r>
 8002d20:	6030      	str	r0, [r6, #0]
 8002d22:	4621      	mov	r1, r4
 8002d24:	4628      	mov	r0, r5
 8002d26:	f000 f8a7 	bl	8002e78 <_sbrk_r>
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	d00a      	beq.n	8002d44 <sbrk_aligned+0x34>
 8002d2e:	1cc4      	adds	r4, r0, #3
 8002d30:	f024 0403 	bic.w	r4, r4, #3
 8002d34:	42a0      	cmp	r0, r4
 8002d36:	d007      	beq.n	8002d48 <sbrk_aligned+0x38>
 8002d38:	1a21      	subs	r1, r4, r0
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f000 f89c 	bl	8002e78 <_sbrk_r>
 8002d40:	3001      	adds	r0, #1
 8002d42:	d101      	bne.n	8002d48 <sbrk_aligned+0x38>
 8002d44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d48:	4620      	mov	r0, r4
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	20000120 	.word	0x20000120

08002d50 <_malloc_r>:
 8002d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d54:	1ccd      	adds	r5, r1, #3
 8002d56:	f025 0503 	bic.w	r5, r5, #3
 8002d5a:	3508      	adds	r5, #8
 8002d5c:	2d0c      	cmp	r5, #12
 8002d5e:	bf38      	it	cc
 8002d60:	250c      	movcc	r5, #12
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	4607      	mov	r7, r0
 8002d66:	db01      	blt.n	8002d6c <_malloc_r+0x1c>
 8002d68:	42a9      	cmp	r1, r5
 8002d6a:	d905      	bls.n	8002d78 <_malloc_r+0x28>
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	2600      	movs	r6, #0
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4630      	mov	r0, r6
 8002d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e4c <_malloc_r+0xfc>
 8002d7c:	f000 f868 	bl	8002e50 <__malloc_lock>
 8002d80:	f8d8 3000 	ldr.w	r3, [r8]
 8002d84:	461c      	mov	r4, r3
 8002d86:	bb5c      	cbnz	r4, 8002de0 <_malloc_r+0x90>
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	f7ff ffc0 	bl	8002d10 <sbrk_aligned>
 8002d90:	1c43      	adds	r3, r0, #1
 8002d92:	4604      	mov	r4, r0
 8002d94:	d155      	bne.n	8002e42 <_malloc_r+0xf2>
 8002d96:	f8d8 4000 	ldr.w	r4, [r8]
 8002d9a:	4626      	mov	r6, r4
 8002d9c:	2e00      	cmp	r6, #0
 8002d9e:	d145      	bne.n	8002e2c <_malloc_r+0xdc>
 8002da0:	2c00      	cmp	r4, #0
 8002da2:	d048      	beq.n	8002e36 <_malloc_r+0xe6>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	4631      	mov	r1, r6
 8002da8:	4638      	mov	r0, r7
 8002daa:	eb04 0903 	add.w	r9, r4, r3
 8002dae:	f000 f863 	bl	8002e78 <_sbrk_r>
 8002db2:	4581      	cmp	r9, r0
 8002db4:	d13f      	bne.n	8002e36 <_malloc_r+0xe6>
 8002db6:	6821      	ldr	r1, [r4, #0]
 8002db8:	4638      	mov	r0, r7
 8002dba:	1a6d      	subs	r5, r5, r1
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7ff ffa7 	bl	8002d10 <sbrk_aligned>
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d037      	beq.n	8002e36 <_malloc_r+0xe6>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	442b      	add	r3, r5
 8002dca:	6023      	str	r3, [r4, #0]
 8002dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d038      	beq.n	8002e46 <_malloc_r+0xf6>
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	42a2      	cmp	r2, r4
 8002dd8:	d12b      	bne.n	8002e32 <_malloc_r+0xe2>
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e00f      	b.n	8002e00 <_malloc_r+0xb0>
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	1b52      	subs	r2, r2, r5
 8002de4:	d41f      	bmi.n	8002e26 <_malloc_r+0xd6>
 8002de6:	2a0b      	cmp	r2, #11
 8002de8:	d917      	bls.n	8002e1a <_malloc_r+0xca>
 8002dea:	1961      	adds	r1, r4, r5
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	6025      	str	r5, [r4, #0]
 8002df0:	bf18      	it	ne
 8002df2:	6059      	strne	r1, [r3, #4]
 8002df4:	6863      	ldr	r3, [r4, #4]
 8002df6:	bf08      	it	eq
 8002df8:	f8c8 1000 	streq.w	r1, [r8]
 8002dfc:	5162      	str	r2, [r4, r5]
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	4638      	mov	r0, r7
 8002e02:	f104 060b 	add.w	r6, r4, #11
 8002e06:	f000 f829 	bl	8002e5c <__malloc_unlock>
 8002e0a:	f026 0607 	bic.w	r6, r6, #7
 8002e0e:	1d23      	adds	r3, r4, #4
 8002e10:	1af2      	subs	r2, r6, r3
 8002e12:	d0ae      	beq.n	8002d72 <_malloc_r+0x22>
 8002e14:	1b9b      	subs	r3, r3, r6
 8002e16:	50a3      	str	r3, [r4, r2]
 8002e18:	e7ab      	b.n	8002d72 <_malloc_r+0x22>
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	6862      	ldr	r2, [r4, #4]
 8002e1e:	d1dd      	bne.n	8002ddc <_malloc_r+0x8c>
 8002e20:	f8c8 2000 	str.w	r2, [r8]
 8002e24:	e7ec      	b.n	8002e00 <_malloc_r+0xb0>
 8002e26:	4623      	mov	r3, r4
 8002e28:	6864      	ldr	r4, [r4, #4]
 8002e2a:	e7ac      	b.n	8002d86 <_malloc_r+0x36>
 8002e2c:	4634      	mov	r4, r6
 8002e2e:	6876      	ldr	r6, [r6, #4]
 8002e30:	e7b4      	b.n	8002d9c <_malloc_r+0x4c>
 8002e32:	4613      	mov	r3, r2
 8002e34:	e7cc      	b.n	8002dd0 <_malloc_r+0x80>
 8002e36:	230c      	movs	r3, #12
 8002e38:	4638      	mov	r0, r7
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	f000 f80e 	bl	8002e5c <__malloc_unlock>
 8002e40:	e797      	b.n	8002d72 <_malloc_r+0x22>
 8002e42:	6025      	str	r5, [r4, #0]
 8002e44:	e7dc      	b.n	8002e00 <_malloc_r+0xb0>
 8002e46:	605b      	str	r3, [r3, #4]
 8002e48:	deff      	udf	#255	; 0xff
 8002e4a:	bf00      	nop
 8002e4c:	2000011c 	.word	0x2000011c

08002e50 <__malloc_lock>:
 8002e50:	4801      	ldr	r0, [pc, #4]	; (8002e58 <__malloc_lock+0x8>)
 8002e52:	f000 b84b 	b.w	8002eec <__retarget_lock_acquire_recursive>
 8002e56:	bf00      	nop
 8002e58:	20000260 	.word	0x20000260

08002e5c <__malloc_unlock>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	; (8002e64 <__malloc_unlock+0x8>)
 8002e5e:	f000 b846 	b.w	8002eee <__retarget_lock_release_recursive>
 8002e62:	bf00      	nop
 8002e64:	20000260 	.word	0x20000260

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <_sbrk_r>:
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	4d05      	ldr	r5, [pc, #20]	; (8002e94 <_sbrk_r+0x1c>)
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4608      	mov	r0, r1
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	f7fe fae0 	bl	8001448 <_sbrk>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d102      	bne.n	8002e92 <_sbrk_r+0x1a>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	b103      	cbz	r3, 8002e92 <_sbrk_r+0x1a>
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	2000025c 	.word	0x2000025c

08002e98 <__errno>:
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <__errno+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000006c 	.word	0x2000006c

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 f864 	bl	8002f80 <_init>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002fcc 	.word	0x08002fcc
 8002ee0:	08002fcc 	.word	0x08002fcc
 8002ee4:	08002fcc 	.word	0x08002fcc
 8002ee8:	08002fd0 	.word	0x08002fd0

08002eec <__retarget_lock_acquire_recursive>:
 8002eec:	4770      	bx	lr

08002eee <__retarget_lock_release_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <_free_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4605      	mov	r5, r0
 8002ef4:	2900      	cmp	r1, #0
 8002ef6:	d040      	beq.n	8002f7a <_free_r+0x8a>
 8002ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002efc:	1f0c      	subs	r4, r1, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfb8      	it	lt
 8002f02:	18e4      	addlt	r4, r4, r3
 8002f04:	f7ff ffa4 	bl	8002e50 <__malloc_lock>
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <_free_r+0x8c>)
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	b933      	cbnz	r3, 8002f1c <_free_r+0x2c>
 8002f0e:	6063      	str	r3, [r4, #4]
 8002f10:	6014      	str	r4, [r2, #0]
 8002f12:	4628      	mov	r0, r5
 8002f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f18:	f7ff bfa0 	b.w	8002e5c <__malloc_unlock>
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	d908      	bls.n	8002f32 <_free_r+0x42>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	1821      	adds	r1, r4, r0
 8002f24:	428b      	cmp	r3, r1
 8002f26:	bf01      	itttt	eq
 8002f28:	6819      	ldreq	r1, [r3, #0]
 8002f2a:	685b      	ldreq	r3, [r3, #4]
 8002f2c:	1809      	addeq	r1, r1, r0
 8002f2e:	6021      	streq	r1, [r4, #0]
 8002f30:	e7ed      	b.n	8002f0e <_free_r+0x1e>
 8002f32:	461a      	mov	r2, r3
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b10b      	cbz	r3, 8002f3c <_free_r+0x4c>
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d9fa      	bls.n	8002f32 <_free_r+0x42>
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	1850      	adds	r0, r2, r1
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d10b      	bne.n	8002f5c <_free_r+0x6c>
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	4401      	add	r1, r0
 8002f48:	1850      	adds	r0, r2, r1
 8002f4a:	4283      	cmp	r3, r0
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	d1e0      	bne.n	8002f12 <_free_r+0x22>
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4408      	add	r0, r1
 8002f56:	6010      	str	r0, [r2, #0]
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	e7da      	b.n	8002f12 <_free_r+0x22>
 8002f5c:	d902      	bls.n	8002f64 <_free_r+0x74>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	602b      	str	r3, [r5, #0]
 8002f62:	e7d6      	b.n	8002f12 <_free_r+0x22>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	1821      	adds	r1, r4, r0
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	bf01      	itttt	eq
 8002f6c:	6819      	ldreq	r1, [r3, #0]
 8002f6e:	685b      	ldreq	r3, [r3, #4]
 8002f70:	1809      	addeq	r1, r1, r0
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	6054      	str	r4, [r2, #4]
 8002f78:	e7cb      	b.n	8002f12 <_free_r+0x22>
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	2000011c 	.word	0x2000011c

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
