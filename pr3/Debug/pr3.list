
pr3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08002cfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002cfc  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007686  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001898  00000000  00000000  00027762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  00029000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000626  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d20  00000000  00000000  00029e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a0b8  00000000  00000000  00040b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fcec  00000000  00000000  0004ac16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022e8  00000000  00000000  000ca904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ccbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c40 	.word	0x08002c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c40 	.word	0x08002c40

0800014c <computeEquation>:

#include "calculator2.h"

void computeEquation(uint8_t *expression, uint8_t *filled, const uint8_t exprWidth) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
	uint8_t nextTokenBegin, nextTokenEnd;
	struct Node *tree = parseE(expression, *filled, &nextTokenBegin, &nextTokenEnd);
 800015a:	68bb      	ldr	r3, [r7, #8]
 800015c:	7819      	ldrb	r1, [r3, #0]
 800015e:	f107 0312 	add.w	r3, r7, #18
 8000162:	f107 0213 	add.w	r2, r7, #19
 8000166:	68f8      	ldr	r0, [r7, #12]
 8000168:	f000 f825 	bl	80001b6 <parseE>
 800016c:	6178      	str	r0, [r7, #20]
		pasteToExpression(expression, filled, exprWidth, res);
	}
	else {
		pasteErrorToExpression(expression, filled, exprWidth, 1);
	}*/
	freeTree(tree);
 800016e:	6978      	ldr	r0, [r7, #20]
 8000170:	f000 f804 	bl	800017c <freeTree>
}
 8000174:	bf00      	nop
 8000176:	3718      	adds	r7, #24
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}

0800017c <freeTree>:

void freeTree(struct Node *eq) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	if(eq->lNode != NULL)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	689b      	ldr	r3, [r3, #8]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d004      	beq.n	8000196 <freeTree+0x1a>
			freeTree(eq->lNode);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4618      	mov	r0, r3
 8000192:	f7ff fff3 	bl	800017c <freeTree>
	if(eq->rNode != NULL)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	68db      	ldr	r3, [r3, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d004      	beq.n	80001a8 <freeTree+0x2c>
			freeTree(eq->rNode);
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	68db      	ldr	r3, [r3, #12]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f7ff ffea 	bl	800017c <freeTree>
	free(eq);
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f002 fc09 	bl	80029c0 <free>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <parseE>:
			expression[i] = ' ';
		*filled = 6;
	}
}

struct Node *parseE(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b08c      	sub	sp, #48	; 0x30
 80001ba:	af02      	add	r7, sp, #8
 80001bc:	60f8      	str	r0, [r7, #12]
 80001be:	607a      	str	r2, [r7, #4]
 80001c0:	603b      	str	r3, [r7, #0]
 80001c2:	460b      	mov	r3, r1
 80001c4:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 80001c6:	7af9      	ldrb	r1, [r7, #11]
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	687a      	ldr	r2, [r7, #4]
 80001cc:	68f8      	ldr	r0, [r7, #12]
 80001ce:	f000 f84e 	bl	800026e <parseT>
 80001d2:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 80001d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d13a      	bne.n	8000250 <parseE+0x9a>
		return NULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	e043      	b.n	8000266 <parseE+0xb0>
		
	uint8_t tokentype;
	uint32_t tokenVal;

	while(!lastToken(filled, *nextTokenEnd)) {
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	7819      	ldrb	r1, [r3, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	781a      	ldrb	r2, [r3, #0]
 80001e6:	f107 001b 	add.w	r0, r7, #27
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	4603      	mov	r3, r0
 80001f2:	68f8      	ldr	r0, [r7, #12]
 80001f4:	f000 f95f 	bl	80004b6 <getToken>
		if(tokentype == 0) {
 80001f8:	7efb      	ldrb	r3, [r7, #27]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <parseE+0x4c>
			return NULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	e031      	b.n	8000266 <parseE+0xb0>
		}
		if(tokenVal == '+' || tokenVal == '-') {
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	2b2b      	cmp	r3, #43	; 0x2b
 8000206:	d002      	beq.n	800020e <parseE+0x58>
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	2b2d      	cmp	r3, #45	; 0x2d
 800020c:	d12a      	bne.n	8000264 <parseE+0xae>
			struct Node *f2 = parseT(expression, filled, nextTokenBegin, nextTokenEnd);
 800020e:	7af9      	ldrb	r1, [r7, #11]
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	68f8      	ldr	r0, [r7, #12]
 8000216:	f000 f82a 	bl	800026e <parseT>
 800021a:	6238      	str	r0, [r7, #32]
			if(f2 == NULL)
 800021c:	6a3b      	ldr	r3, [r7, #32]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d101      	bne.n	8000226 <parseE+0x70>
				return NULL;
 8000222:	2300      	movs	r3, #0
 8000224:	e01f      	b.n	8000266 <parseE+0xb0>
			struct Node *ret = malloc(sizeof(struct Node));
 8000226:	2010      	movs	r0, #16
 8000228:	f002 fbc2 	bl	80029b0 <malloc>
 800022c:	4603      	mov	r3, r0
 800022e:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='+' ? ADD : SUB;
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	2b2b      	cmp	r3, #43	; 0x2b
 8000234:	d101      	bne.n	800023a <parseE+0x84>
 8000236:	2201      	movs	r2, #1
 8000238:	e000      	b.n	800023c <parseE+0x86>
 800023a:	2202      	movs	r2, #2
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 8000240:	69fb      	ldr	r3, [r7, #28]
 8000242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000244:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	6a3a      	ldr	r2, [r7, #32]
 800024a:	60da      	str	r2, [r3, #12]
			f = ret;
 800024c:	69fb      	ldr	r3, [r7, #28]
 800024e:	627b      	str	r3, [r7, #36]	; 0x24
	while(!lastToken(filled, *nextTokenEnd)) {
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	7afb      	ldrb	r3, [r7, #11]
 8000256:	4611      	mov	r1, r2
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f918 	bl	800048e <lastToken>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0bc      	beq.n	80001de <parseE+0x28>
		else {
			//return NULL;
			break;
		}
	}
	return f;
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000266:	4618      	mov	r0, r3
 8000268:	3728      	adds	r7, #40	; 0x28
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <parseT>:

// Assume there is T to parse in the expression
// If not, return NULL
//
// If there is one additional char, there is no error
struct Node *parseT(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 800026e:	b580      	push	{r7, lr}
 8000270:	b08c      	sub	sp, #48	; 0x30
 8000272:	af02      	add	r7, sp, #8
 8000274:	60f8      	str	r0, [r7, #12]
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	460b      	mov	r3, r1
 800027c:	72fb      	strb	r3, [r7, #11]
	struct Node *f = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 800027e:	7af9      	ldrb	r1, [r7, #11]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f000 f84d 	bl	8000324 <parseF>
 800028a:	6278      	str	r0, [r7, #36]	; 0x24
	if(f == NULL)
 800028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028e:	2b00      	cmp	r3, #0
 8000290:	d13a      	bne.n	8000308 <parseT+0x9a>
		return NULL;
 8000292:	2300      	movs	r3, #0
 8000294:	e042      	b.n	800031c <parseT+0xae>
	
	uint8_t tokentype;
	uint32_t tokenVal;

	while(!nextToken(expression, filled, nextTokenBegin, nextTokenEnd)) {
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	7819      	ldrb	r1, [r3, #0]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	f107 001b 	add.w	r0, r7, #27
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	4603      	mov	r3, r0
 80002aa:	68f8      	ldr	r0, [r7, #12]
 80002ac:	f000 f903 	bl	80004b6 <getToken>
		if(tokentype == 0) {
 80002b0:	7efb      	ldrb	r3, [r7, #27]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d101      	bne.n	80002ba <parseT+0x4c>
			return NULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	e030      	b.n	800031c <parseT+0xae>
		}
		if(tokenVal == '*' || tokenVal == '/') {
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	2b2a      	cmp	r3, #42	; 0x2a
 80002be:	d002      	beq.n	80002c6 <parseT+0x58>
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b2f      	cmp	r3, #47	; 0x2f
 80002c4:	d129      	bne.n	800031a <parseT+0xac>
			struct Node *f2 = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80002c6:	7af9      	ldrb	r1, [r7, #11]
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f000 f829 	bl	8000324 <parseF>
 80002d2:	6238      	str	r0, [r7, #32]
			if(f2 == NULL)
 80002d4:	6a3b      	ldr	r3, [r7, #32]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <parseT+0x70>
				return NULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	e01e      	b.n	800031c <parseT+0xae>
			struct Node *ret = malloc(sizeof(struct Node));
 80002de:	2010      	movs	r0, #16
 80002e0:	f002 fb66 	bl	80029b0 <malloc>
 80002e4:	4603      	mov	r3, r0
 80002e6:	61fb      	str	r3, [r7, #28]
			ret->type=tokenVal=='*' ? MULT : DIV;
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	2b2a      	cmp	r3, #42	; 0x2a
 80002ec:	d101      	bne.n	80002f2 <parseT+0x84>
 80002ee:	2203      	movs	r2, #3
 80002f0:	e000      	b.n	80002f4 <parseT+0x86>
 80002f2:	2204      	movs	r2, #4
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	701a      	strb	r2, [r3, #0]
			ret->lNode = f;
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002fc:	609a      	str	r2, [r3, #8]
			ret->rNode = f2;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	6a3a      	ldr	r2, [r7, #32]
 8000302:	60da      	str	r2, [r3, #12]
			f = ret;
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
	while(!nextToken(expression, filled, nextTokenBegin, nextTokenEnd)) {
 8000308:	7af9      	ldrb	r1, [r7, #11]
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	68f8      	ldr	r0, [r7, #12]
 8000310:	f000 f87a 	bl	8000408 <nextToken>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0bd      	beq.n	8000296 <parseT+0x28>
		else {
			//return NULL;
			break;
		}
	}
	return f;
 800031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 800031c:	4618      	mov	r0, r3
 800031e:	3728      	adds	r7, #40	; 0x28
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <parseF>:
// It should parse factor as much as it can
// expression length >= 0
// filled is in [0, expression length]
// *nextTokenBegin is in [0, filled-1]
// *nextTokenBegin is in [0, filled]
struct Node *parseF(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b08c      	sub	sp, #48	; 0x30
 8000328:	af02      	add	r7, sp, #8
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	607a      	str	r2, [r7, #4]
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	460b      	mov	r3, r1
 8000332:	72fb      	strb	r3, [r7, #11]
	if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))// this should be called by parseT
 8000334:	7af9      	ldrb	r1, [r7, #11]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f000 f864 	bl	8000408 <nextToken>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <parseF+0x26>
		return NULL;
 8000346:	2300      	movs	r3, #0
 8000348:	e05a      	b.n	8000400 <parseF+0xdc>
	uint8_t tokentype;
	uint32_t tokenVal;
	getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	7819      	ldrb	r1, [r3, #0]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	f107 0017 	add.w	r0, r7, #23
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	4603      	mov	r3, r0
 800035e:	68f8      	ldr	r0, [r7, #12]
 8000360:	f000 f8a9 	bl	80004b6 <getToken>
	if(tokentype == 0) {
 8000364:	7dfb      	ldrb	r3, [r7, #23]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10c      	bne.n	8000384 <parseF+0x60>
		struct Node *ret = malloc(sizeof(struct Node));
 800036a:	2010      	movs	r0, #16
 800036c:	f002 fb20 	bl	80029b0 <malloc>
 8000370:	4603      	mov	r3, r0
 8000372:	61bb      	str	r3, [r7, #24]
		ret->type = NUMBER;
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
		ret->value = tokenVal;
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	605a      	str	r2, [r3, #4]
		return ret;
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	e03d      	b.n	8000400 <parseF+0xdc>
	}
	else if(tokenVal == '(') {
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	2b28      	cmp	r3, #40	; 0x28
 8000388:	d11d      	bne.n	80003c6 <parseF+0xa2>
		struct Node *r = parseE(expression, filled, nextTokenBegin, nextTokenEnd);
 800038a:	7af9      	ldrb	r1, [r7, #11]
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff10 	bl	80001b6 <parseE>
 8000396:	61f8      	str	r0, [r7, #28]
		//if(nextToken(expression, filled, nextTokenBegin, nextTokenEnd))
		//	return NULL;
		getToken(expression, *nextTokenBegin, *nextTokenEnd, &tokentype, &tokenVal);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7819      	ldrb	r1, [r3, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	f107 0017 	add.w	r0, r7, #23
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	4603      	mov	r3, r0
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f000 f882 	bl	80004b6 <getToken>
		if(tokentype == 1 && tokenVal == ')')
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d104      	bne.n	80003c2 <parseF+0x9e>
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	2b29      	cmp	r3, #41	; 0x29
 80003bc:	d101      	bne.n	80003c2 <parseF+0x9e>
			return r;
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	e01e      	b.n	8000400 <parseF+0xdc>
		else 
			return NULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	e01c      	b.n	8000400 <parseF+0xdc>
	}
	else if(tokenVal == '-') {
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	2b2d      	cmp	r3, #45	; 0x2d
 80003ca:	d118      	bne.n	80003fe <parseF+0xda>
		struct Node *r = parseF(expression, filled, nextTokenBegin, nextTokenEnd);
 80003cc:	7af9      	ldrb	r1, [r7, #11]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	68f8      	ldr	r0, [r7, #12]
 80003d4:	f7ff ffa6 	bl	8000324 <parseF>
 80003d8:	6278      	str	r0, [r7, #36]	; 0x24
		if(r == NULL)
 80003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d101      	bne.n	80003e4 <parseF+0xc0>
			return NULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	e00d      	b.n	8000400 <parseF+0xdc>
		struct Node *ret = malloc(sizeof(struct Node));
 80003e4:	2010      	movs	r0, #16
 80003e6:	f002 fae3 	bl	80029b0 <malloc>
 80003ea:	4603      	mov	r3, r0
 80003ec:	623b      	str	r3, [r7, #32]
		ret->type = NEG;
 80003ee:	6a3b      	ldr	r3, [r7, #32]
 80003f0:	2205      	movs	r2, #5
 80003f2:	701a      	strb	r2, [r3, #0]
		ret->lNode = r;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003f8:	609a      	str	r2, [r3, #8]
		return ret;
 80003fa:	6a3b      	ldr	r3, [r7, #32]
 80003fc:	e000      	b.n	8000400 <parseF+0xdc>
	}
	else {
		return NULL;
 80003fe:	2300      	movs	r3, #0
	}
}
 8000400:	4618      	mov	r0, r3
 8000402:	3728      	adds	r7, #40	; 0x28
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <nextToken>:
// filled is in [0, expression length]
// *nextTokenBegin is in [0, filled-1] - not important
// *nextTokenBegin is in [0, filled]
// returns 1 when no more tokens
// return 0 when got a token
uint8_t nextToken(uint8_t *expression, uint8_t filled, uint8_t *nextTokenBegin, uint8_t *nextTokenEnd) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	460b      	mov	r3, r1
 8000416:	72fb      	strb	r3, [r7, #11]
	if(*nextTokenEnd >= filled) 
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	7afa      	ldrb	r2, [r7, #11]
 800041e:	429a      	cmp	r2, r3
 8000420:	d801      	bhi.n	8000426 <nextToken+0x1e>
		return 1;
 8000422:	2301      	movs	r3, #1
 8000424:	e02f      	b.n	8000486 <nextToken+0x7e>
	*nextTokenBegin=*nextTokenEnd;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	781a      	ldrb	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	701a      	strb	r2, [r3, #0]
	if(isNum(expression[*nextTokenBegin])) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	461a      	mov	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f88b 	bl	8000556 <isNum>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d018      	beq.n	8000478 <nextToken+0x70>
		while(++(*nextTokenEnd) < filled && isNum(expression[*nextTokenEnd]));
 8000446:	bf00      	nop
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	7afa      	ldrb	r2, [r7, #11]
 800045a:	429a      	cmp	r2, r3
 800045c:	d912      	bls.n	8000484 <nextToken+0x7c>
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	461a      	mov	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f873 	bl	8000556 <isNum>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1e8      	bne.n	8000448 <nextToken+0x40>
 8000476:	e005      	b.n	8000484 <nextToken+0x7c>
	}
	else {
		++(*nextTokenEnd);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	b2da      	uxtb	r2, r3
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <lastToken>:

uint8_t lastToken(uint8_t filled, uint8_t nextTokenEnd) {
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	460a      	mov	r2, r1
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	4613      	mov	r3, r2
 800049c:	71bb      	strb	r3, [r7, #6]
	return nextTokenEnd >= filled;
 800049e:	79ba      	ldrb	r2, [r7, #6]
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	bf2c      	ite	cs
 80004a6:	2301      	movcs	r3, #1
 80004a8:	2300      	movcc	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
};
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <getToken>:

uint8_t getToken(uint8_t *expression, uint8_t nextTokenBegin, uint8_t nextTokenEnd, uint8_t *tokenType, uint32_t *tokenVal) {
 80004b6:	b480      	push	{r7}
 80004b8:	b087      	sub	sp, #28
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	60f8      	str	r0, [r7, #12]
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	72fb      	strb	r3, [r7, #11]
 80004c4:	4613      	mov	r3, r2
 80004c6:	72bb      	strb	r3, [r7, #10]
	if(expression[nextTokenBegin] >= '0' && expression[nextTokenBegin] <= '9') {
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b2f      	cmp	r3, #47	; 0x2f
 80004d2:	d930      	bls.n	8000536 <getToken+0x80>
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b39      	cmp	r3, #57	; 0x39
 80004de:	d82a      	bhi.n	8000536 <getToken+0x80>
		*tokenType = 0;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin]-48;
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3b30      	subs	r3, #48	; 0x30
 80004f0:	461a      	mov	r2, r3
 80004f2:	6a3b      	ldr	r3, [r7, #32]
 80004f4:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	3301      	adds	r3, #1
 80004fa:	75fb      	strb	r3, [r7, #23]
 80004fc:	e016      	b.n	800052c <getToken+0x76>
			*tokenVal *= 10;
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	461a      	mov	r2, r3
 800050c:	6a3b      	ldr	r3, [r7, #32]
 800050e:	601a      	str	r2, [r3, #0]
			*tokenVal += expression[i]-48;
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	7dfa      	ldrb	r2, [r7, #23]
 8000516:	68f9      	ldr	r1, [r7, #12]
 8000518:	440a      	add	r2, r1
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	4413      	add	r3, r2
 800051e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	601a      	str	r2, [r3, #0]
		for(uint8_t i = nextTokenBegin+1; i < nextTokenEnd; ++i) {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3301      	adds	r3, #1
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3e4      	bcc.n	80004fe <getToken+0x48>
 8000534:	e009      	b.n	800054a <getToken+0x94>
		}
	}
	else {
		*tokenType = 1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
		*tokenVal = expression[nextTokenBegin];
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	601a      	str	r2, [r3, #0]
	}
}
 800054a:	bf00      	nop
 800054c:	4618      	mov	r0, r3
 800054e:	371c      	adds	r7, #28
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <isNum>:

uint8_t isNum(uint8_t ch) {
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	4603      	mov	r3, r0
 800055e:	71fb      	strb	r3, [r7, #7]
	return ch >= '0' && ch <= '9';
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b2f      	cmp	r3, #47	; 0x2f
 8000564:	d904      	bls.n	8000570 <isNum+0x1a>
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b39      	cmp	r3, #57	; 0x39
 800056a:	d801      	bhi.n	8000570 <isNum+0x1a>
 800056c:	2301      	movs	r3, #1
 800056e:	e000      	b.n	8000572 <isNum+0x1c>
 8000570:	2300      	movs	r3, #0
 8000572:	b2db      	uxtb	r3, r3
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <drawExpression>:

#include "gui.h"

#include "lcddisplay.h"

void drawExpression(uint8_t *expression, uint8_t cursor, uint8_t shift, uint8_t filled, uint8_t exprwidth, uint8_t screenwidth) {
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	4608      	mov	r0, r1
 8000588:	4611      	mov	r1, r2
 800058a:	461a      	mov	r2, r3
 800058c:	4603      	mov	r3, r0
 800058e:	70fb      	strb	r3, [r7, #3]
 8000590:	460b      	mov	r3, r1
 8000592:	70bb      	strb	r3, [r7, #2]
 8000594:	4613      	mov	r3, r2
 8000596:	707b      	strb	r3, [r7, #1]
	LCDsetCursorPos(0, 0);
 8000598:	2100      	movs	r1, #0
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f9dd 	bl	800095a <LCDsetCursorPos>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e011      	b.n	80005ca <drawExpression+0x4c>
	  if(i < exprwidth)
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	7e3b      	ldrb	r3, [r7, #24]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d207      	bcs.n	80005be <drawExpression+0x40>
		  LCDwrite(expression[i]);
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9c0 	bl	800093c <LCDwrite>
 80005bc:	e002      	b.n	80005c4 <drawExpression+0x46>
	  else
		  LCDwrite(' ');
 80005be:	2020      	movs	r0, #32
 80005c0:	f000 f9bc 	bl	800093c <LCDwrite>
	for(uint8_t i = shift; i < shift + screenwidth; ++i) {
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	3301      	adds	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	78b9      	ldrb	r1, [r7, #2]
 80005ce:	7f3b      	ldrb	r3, [r7, #28]
 80005d0:	440b      	add	r3, r1
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dbe7      	blt.n	80005a6 <drawExpression+0x28>
	}
	LCDsetCursorPos(0, cursor-shift);
 80005d6:	78fa      	ldrb	r2, [r7, #3]
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9ba 	bl	800095a <LCDsetCursorPos>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <drawMenu>:

void drawMenu(uint8_t page, uint8_t screenwidth, uint8_t (*pages)[3], uint8_t numofpages, uint8_t cursorScreen) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	603a      	str	r2, [r7, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	460b      	mov	r3, r1
 80005fe:	71bb      	strb	r3, [r7, #6]
 8000600:	4613      	mov	r3, r2
 8000602:	717b      	strb	r3, [r7, #5]
	LCDsetCursorPos(1, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f000 f9a7 	bl	800095a <LCDsetCursorPos>
	//uint8_t *t = "Page ";
	//LCDwriteText(t);
	LCDwrite(page + 48);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	3330      	adds	r3, #48	; 0x30
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f992 	bl	800093c <LCDwrite>
	LCDwrite(' ');
 8000618:	2020      	movs	r0, #32
 800061a:	f000 f98f 	bl	800093c <LCDwrite>
	LCDwrite(pages[page][0]);
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f985 	bl	800093c <LCDwrite>
	LCDwrite(' ');
 8000632:	2020      	movs	r0, #32
 8000634:	f000 f982 	bl	800093c <LCDwrite>
	LCDwrite(pages[page][1]);
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f978 	bl	800093c <LCDwrite>
	LCDwrite(' ');
 800064c:	2020      	movs	r0, #32
 800064e:	f000 f975 	bl	800093c <LCDwrite>
	LCDwrite(pages[page][2]);
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	4413      	add	r3, r2
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f96b 	bl	800093c <LCDwrite>
	LCDsetCursorPos(0, cursorScreen);
 8000666:	7c3b      	ldrb	r3, [r7, #16]
 8000668:	4619      	mov	r1, r3
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f975 	bl	800095a <LCDsetCursorPos>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <addChar>:

void addChar(uint8_t *expression, uint8_t (*pages)[3], uint8_t page, uint8_t button, uint8_t *cursor, uint8_t *shift, uint8_t *filled, uint8_t exprwidth, uint8_t screenwidth) {
 8000678:	b480      	push	{r7}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	460b      	mov	r3, r1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	4613      	mov	r3, r2
 800068c:	71bb      	strb	r3, [r7, #6]
	if(*filled >= exprwidth)
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000696:	429a      	cmp	r2, r3
 8000698:	d93f      	bls.n	800071a <addChar+0xa2>
		return;
	for(uint8_t i = *filled; i > *cursor; --i) {
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	75fb      	strb	r3, [r7, #23]
 80006a0:	e00b      	b.n	80006ba <addChar+0x42>
		expression[i] = expression[i-1];
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	441a      	add	r2, r3
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	68f9      	ldr	r1, [r7, #12]
 80006ae:	440b      	add	r3, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = *filled; i > *cursor; --i) {
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	7dfa      	ldrb	r2, [r7, #23]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8ee      	bhi.n	80006a2 <addChar+0x2a>
	}
	expression[*cursor] = pages[page][button];
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	18d1      	adds	r1, r2, r3
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4403      	add	r3, r0
 80006dc:	5c8a      	ldrb	r2, [r1, r2]
 80006de:	701a      	strb	r2, [r3, #0]
	++(*filled);
 80006e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ea:	701a      	strb	r2, [r3, #0]
	++(*cursor);
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000702:	4413      	add	r3, r2
 8000704:	6a3a      	ldr	r2, [r7, #32]
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	4293      	cmp	r3, r2
 800070a:	dc07      	bgt.n	800071c <addChar+0xa4>
		++(*shift);
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e000      	b.n	800071c <addChar+0xa4>
		return;
 800071a:	bf00      	nop
}
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <moveLeft>:

void moveLeft(uint8_t filled, uint8_t *cursor, uint8_t *shift) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	if(*cursor > 0)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d005      	beq.n	8000746 <moveLeft+0x22>
		--(*cursor);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	701a      	strb	r2, [r3, #0]
	if(*shift > *cursor)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d905      	bls.n	800075e <moveLeft+0x3a>
		--(*shift);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <moveRight>:

void moveRight(uint8_t filled, uint8_t *cursor, uint8_t *shift, uint8_t screenwidth) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	461a      	mov	r2, r3
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	4613      	mov	r3, r2
 800077a:	73bb      	strb	r3, [r7, #14]
	if(*cursor < filled)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	429a      	cmp	r2, r3
 8000784:	d905      	bls.n	8000792 <moveRight+0x2a>
		++(*cursor);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	701a      	strb	r2, [r3, #0]
	if(*shift+screenwidth-1 < *cursor)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	4413      	add	r3, r2
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	4293      	cmp	r3, r2
 80007a2:	dc05      	bgt.n	80007b0 <moveRight+0x48>
		++(*shift);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	701a      	strb	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <nextPage>:

void nextPage(uint8_t *page, uint8_t numofpages) {
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]
	++(*page);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	701a      	strb	r2, [r3, #0]
	(*page)%=numofpages;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80007dc:	fb01 f202 	mul.w	r2, r1, r2
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <LCDsend_>:
#include "stm32f1xx_hal.h"

#include "lcddisplay.h"

// Should add 100us delay right after control byte and right after data byte
void LCDsend_(uint8_t control, uint8_t data, uint8_t delay) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	460b      	mov	r3, r1
 8000800:	71bb      	strb	r3, [r7, #6]
 8000802:	4613      	mov	r3, r2
 8000804:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	733b      	strb	r3, [r7, #12]
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDADDR<<1, toSend, 2, HAL_MAX_DELAY);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <LCDsend_+0x40>)
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2302      	movs	r3, #2
 800081e:	217c      	movs	r1, #124	; 0x7c
 8000820:	f001 f972 	bl	8001b08 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd32 	bl	8001290 <HAL_Delay>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000008c 	.word	0x2000008c

08000838 <LCDBacklightsend_>:

// Maybe rewrite using one function
void LCDBacklightsend_(uint8_t control, uint8_t data, uint8_t delay) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af02      	add	r7, sp, #8
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	460b      	mov	r3, r1
 8000844:	71bb      	strb	r3, [r7, #6]
 8000846:	4613      	mov	r3, r2
 8000848:	717b      	strb	r3, [r7, #5]
	uint8_t toSend[2] = {control, data};
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	733b      	strb	r3, [r7, #12]
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1Ptr_, LCDBACKLIGHTADDR<<1, toSend, 2, HAL_MAX_DELAY);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <LCDBacklightsend_+0x40>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2302      	movs	r3, #2
 8000862:	21d6      	movs	r1, #214	; 0xd6
 8000864:	f001 f950 	bl	8001b08 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd10 	bl	8001290 <HAL_Delay>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c

0800087c <LCDinit>:

void LCDinit(I2C_HandleTypeDef *hi2c1Ptr__) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	hi2c1Ptr_ = hi2c1Ptr__;
 8000884:	4a29      	ldr	r2, [pc, #164]	; (800092c <LCDinit+0xb0>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]

	LCDdisplayOn_ = 1;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <LCDinit+0xb4>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	LCDcursorOn_ = 0;
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <LCDinit+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
	LCDblinkOn_ = 0;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <LCDinit+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	; 0x32
 800089e:	f000 fcf7 	bl	8001290 <HAL_Delay>
	LCDsend_(COMMAND, 0x28, 5);
 80008a2:	2205      	movs	r2, #5
 80008a4:	2128      	movs	r1, #40	; 0x28
 80008a6:	2080      	movs	r0, #128	; 0x80
 80008a8:	f7ff ffa4 	bl	80007f4 <LCDsend_>
	LCDsend_(COMMAND, 0x0C, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	210c      	movs	r1, #12
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	f7ff ff9f 	bl	80007f4 <LCDsend_>
	LCDsend_(COMMAND, 0x01, 2);
 80008b6:	2202      	movs	r2, #2
 80008b8:	2101      	movs	r1, #1
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff9a 	bl	80007f4 <LCDsend_>
	LCDsend_(COMMAND, 0x06, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2106      	movs	r1, #6
 80008c4:	2080      	movs	r0, #128	; 0x80
 80008c6:	f7ff ff95 	bl	80007f4 <LCDsend_>

	LCDBacklightsend_(0x2F, 0x00, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	202f      	movs	r0, #47	; 0x2f
 80008d0:	f7ff ffb2 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x00, 0x20, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ffad 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x01, 0x00, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ffa8 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x02, 0x01, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff ffa3 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x03, 4, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff ff9e 	bl	8000838 <LCDBacklightsend_>

	LCDBacklightsend_(0x06, 255, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	2006      	movs	r0, #6
 8000902:	f7ff ff99 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x05, 255, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	21ff      	movs	r1, #255	; 0xff
 800090a:	2005      	movs	r0, #5
 800090c:	f7ff ff94 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x04, 255, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	21ff      	movs	r1, #255	; 0xff
 8000914:	2004      	movs	r0, #4
 8000916:	f7ff ff8f 	bl	8000838 <LCDBacklightsend_>
	LCDBacklightsend_(0x07, 0xFF, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	21ff      	movs	r1, #255	; 0xff
 800091e:	2007      	movs	r0, #7
 8000920:	f7ff ff8a 	bl	8000838 <LCDBacklightsend_>

}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000008c 	.word	0x2000008c
 8000930:	20000090 	.word	0x20000090
 8000934:	20000091 	.word	0x20000091
 8000938:	20000092 	.word	0x20000092

0800093c <LCDwrite>:

void LCDwrite(uint8_t ch) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	LCDsend_(DATA, ch, 1);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	2040      	movs	r0, #64	; 0x40
 800094e:	f7ff ff51 	bl	80007f4 <LCDsend_>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <LCDsetCursorPos>:

void LCDwriteText(uint8_t *text) {
	while(*text != '\0') LCDwrite(*text++);
}

void LCDsetCursorPos(uint8_t row, uint8_t col) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	460a      	mov	r2, r1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	4613      	mov	r3, r2
 8000968:	71bb      	strb	r3, [r7, #6]
	LCDsend_(COMMAND, 0x80 | col | (row==0 ? 0x00 : 0x40), 1);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <LCDsetCursorPos+0x1a>
 8000970:	2200      	movs	r2, #0
 8000972:	e000      	b.n	8000976 <LCDsetCursorPos+0x1c>
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	4313      	orrs	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	2080      	movs	r0, #128	; 0x80
 8000988:	f7ff ff34 	bl	80007f4 <LCDsend_>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <LCDsetCursor>:

void LCDsetDisplay(uint8_t isOn) {
	LCDdisplayOn_ = isOn;
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
}
void LCDsetCursor(uint8_t isOn) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	LCDcursorOn_ = isOn;
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <LCDsetCursor+0x48>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <LCDsetCursor+0x4c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	b25a      	sxtb	r2, r3
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LCDsetCursor+0x48>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <LCDsetCursor+0x50>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	2080      	movs	r0, #128	; 0x80
 80009d0:	f7ff ff10 	bl	80007f4 <LCDsend_>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000091 	.word	0x20000091
 80009e0:	20000090 	.word	0x20000090
 80009e4:	20000092 	.word	0x20000092

080009e8 <LCDsetBlink>:
void LCDsetBlink(uint8_t isOn) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	LCDblinkOn_ = isOn;
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <LCDsetBlink+0x48>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	7013      	strb	r3, [r2, #0]
	LCDsend_(COMMAND, (LCDdisplayOn_ << 2) | (LCDcursorOn_ << 1) | (LCDblinkOn_) | 0x08, 1);
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <LCDsetBlink+0x4c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	b25a      	sxtb	r2, r3
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <LCDsetBlink+0x50>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b25a      	sxtb	r2, r3
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LCDsetBlink+0x48>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	2080      	movs	r0, #128	; 0x80
 8000a24:	f7ff fee6 	bl	80007f4 <LCDsend_>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000092 	.word	0x20000092
 8000a34:	20000090 	.word	0x20000090
 8000a38:	20000091 	.word	0x20000091

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fbc3 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f889 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f8f1 	bl	8000c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a4e:	f000 f8c1 	bl	8000bd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //stm32f103c6t6a

  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e006      	b.n	8000a66 <main+0x2a>
	  expression[i] = ' ';
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <main+0xf4>)
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EXPRWIDTH; ++i)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3301      	adds	r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b1f      	cmp	r3, #31
 8000a6a:	d9f5      	bls.n	8000a58 <main+0x1c>

  /*expression[0] = 'a';
  expression[1] = 'b';*/
  cursor = 0;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <main+0xf8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  filled = 0;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <main+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  shift = 0;
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <main+0x100>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]

  buttonbeingpressed = 0;
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <main+0x104>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]

  LCDinit(&hi2c1);
 8000a84:	482f      	ldr	r0, [pc, #188]	; (8000b44 <main+0x108>)
 8000a86:	f7ff fef9 	bl	800087c <LCDinit>
  LCDwrite('s');
 8000a8a:	2073      	movs	r0, #115	; 0x73
 8000a8c:	f7ff ff56 	bl	800093c <LCDwrite>
  LCDwrite('t');
 8000a90:	2074      	movs	r0, #116	; 0x74
 8000a92:	f7ff ff53 	bl	800093c <LCDwrite>
  LCDsetCursorPos(0, 0);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff5e 	bl	800095a <LCDsetCursorPos>
  LCDsetCursor(1);
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff ff78 	bl	8000994 <LCDsetCursor>
  LCDsetBlink(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff9f 	bl	80009e8 <LCDsetBlink>
  redraw = 1;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <main+0x10c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
  redrawmenu = 1;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <main+0x110>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]

  uint32_t timerblink = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GetTick()-timerblink > 1000) {
 8000aba:	f000 fbdf 	bl	800127c <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac8:	d907      	bls.n	8000ada <main+0x9e>
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4820      	ldr	r0, [pc, #128]	; (8000b50 <main+0x114>)
 8000ad0:	f000 fea4 	bl	800181c <HAL_GPIO_TogglePin>
		timerblink = HAL_GetTick();
 8000ad4:	f000 fbd2 	bl	800127c <HAL_GetTick>
 8000ad8:	6038      	str	r0, [r7, #0]
	}
	if(redraw) {
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <main+0x10c>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00f      	beq.n	8000b02 <main+0xc6>
		redraw = 0;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <main+0x10c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
		drawExpression(expression, cursor, shift, filled, EXPRWIDTH, SCREENWIDTH);
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <main+0xf8>)
 8000aea:	7819      	ldrb	r1, [r3, #0]
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <main+0x100>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <main+0xfc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2010      	movs	r0, #16
 8000af6:	9001      	str	r0, [sp, #4]
 8000af8:	2020      	movs	r0, #32
 8000afa:	9000      	str	r0, [sp, #0]
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <main+0xf4>)
 8000afe:	f7ff fd3e 	bl	800057e <drawExpression>
	}
	if(redrawmenu) {
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <main+0x110>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0d7      	beq.n	8000aba <main+0x7e>
		redrawmenu = 0;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <main+0x110>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		drawMenu(page, SCREENWIDTH, pages, NUMOFPAGES, cursor-shift);
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <main+0x118>)
 8000b12:	7818      	ldrb	r0, [r3, #0]
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <main+0xf8>)
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <main+0x100>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2306      	movs	r3, #6
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <main+0x11c>)
 8000b26:	2110      	movs	r1, #16
 8000b28:	f7ff fd61 	bl	80005ee <drawMenu>
	if(HAL_GetTick()-timerblink > 1000) {
 8000b2c:	e7c5      	b.n	8000aba <main+0x7e>
 8000b2e:	bf00      	nop
 8000b30:	200000ec 	.word	0x200000ec
 8000b34:	2000010c 	.word	0x2000010c
 8000b38:	2000010e 	.word	0x2000010e
 8000b3c:	2000010d 	.word	0x2000010d
 8000b40:	20000111 	.word	0x20000111
 8000b44:	20000094 	.word	0x20000094
 8000b48:	2000010f 	.word	0x2000010f
 8000b4c:	20000110 	.word	0x20000110
 8000b50:	40011000 	.word	0x40011000
 8000b54:	200000e8 	.word	0x200000e8
 8000b58:	20000000 	.word	0x20000000

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	; 0x40
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2228      	movs	r2, #40	; 0x28
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 ffdc 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b86:	2310      	movs	r3, #16
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fb10 	bl	80021b8 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b9e:	f000 f9e1 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fd7e 	bl	80026bc <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f9cd 	bl	8000f64 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3740      	adds	r7, #64	; 0x40
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f000 fe35 	bl	8001880 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f9a2 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000094 	.word	0x20000094
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a41      	ldr	r2, [pc, #260]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <MX_GPIO_Init+0x120>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPCB_GPIO_Port, LEDPCB_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <MX_GPIO_Init+0x124>)
 8000c94:	f000 fdaa 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDPCB_Pin */
  GPIO_InitStruct.Pin = LEDPCB_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDPCB_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x124>)
 8000cb2:	f000 fc1f 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDCHBUTTON_Pin LEFTBUTTON_Pin RIGHTBUTTON_Pin MENUBUTTON_Pin
                           ADDCH1BUTTON_Pin ADDCH2BUTTON_Pin EQBUTTON_Pin */
  GPIO_InitStruct.Pin = ADDCHBUTTON_Pin|LEFTBUTTON_Pin|RIGHTBUTTON_Pin|MENUBUTTON_Pin
 8000cb6:	23fd      	movs	r3, #253	; 0xfd
 8000cb8:	613b      	str	r3, [r7, #16]
                          |ADDCH1BUTTON_Pin|ADDCH2BUTTON_Pin|EQBUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_GPIO_Init+0x128>)
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4824      	ldr	r0, [pc, #144]	; (8000d5c <MX_GPIO_Init+0x12c>)
 8000cca:	f000 fc13 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKBUTTON_Pin */
  GPIO_InitStruct.Pin = BACKBUTTON_Pin;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_GPIO_Init+0x128>)
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BACKBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0x130>)
 8000ce2:	f000 fc07 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2006      	movs	r0, #6
 8000cec:	f000 fbcb 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f000 fbe4 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f000 fbc3 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d00:	2007      	movs	r0, #7
 8000d02:	f000 fbdc 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2008      	movs	r0, #8
 8000d0c:	f000 fbbb 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d10:	2008      	movs	r0, #8
 8000d12:	f000 fbd4 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2009      	movs	r0, #9
 8000d1c:	f000 fbb3 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d20:	2009      	movs	r0, #9
 8000d22:	f000 fbcc 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f000 fbab 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f000 fbc4 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f000 fba3 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d40:	2017      	movs	r0, #23
 8000d42:	f000 fbbc 	bl	80014be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40011000 	.word	0x40011000
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00

08000d64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af06      	add	r7, sp, #24
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	if(buttonbeingpressed)
 8000d6e:	4b73      	ldr	r3, [pc, #460]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 80dd 	bne.w	8000f32 <HAL_GPIO_EXTI_Callback+0x1ce>
		return;
	buttonbeingpressed=1;
 8000d78:	4b70      	ldr	r3, [pc, #448]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin) {
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2b80      	cmp	r3, #128	; 0x80
 8000d82:	f000 80c2 	beq.w	8000f0a <HAL_GPIO_EXTI_Callback+0x1a6>
 8000d86:	2b80      	cmp	r3, #128	; 0x80
 8000d88:	f300 80cf 	bgt.w	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	dc49      	bgt.n	8000e24 <HAL_GPIO_EXTI_Callback+0xc0>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f340 80ca 	ble.w	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b1f      	cmp	r3, #31
 8000d9a:	f200 80c6 	bhi.w	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000e2b 	.word	0x08000e2b
 8000da8:	08000f03 	.word	0x08000f03
 8000dac:	08000f2b 	.word	0x08000f2b
 8000db0:	08000ec7 	.word	0x08000ec7
 8000db4:	08000f2b 	.word	0x08000f2b
 8000db8:	08000f2b 	.word	0x08000f2b
 8000dbc:	08000f2b 	.word	0x08000f2b
 8000dc0:	08000edd 	.word	0x08000edd
 8000dc4:	08000f2b 	.word	0x08000f2b
 8000dc8:	08000f2b 	.word	0x08000f2b
 8000dcc:	08000f2b 	.word	0x08000f2b
 8000dd0:	08000f2b 	.word	0x08000f2b
 8000dd4:	08000f2b 	.word	0x08000f2b
 8000dd8:	08000f2b 	.word	0x08000f2b
 8000ddc:	08000f2b 	.word	0x08000f2b
 8000de0:	08000ef3 	.word	0x08000ef3
 8000de4:	08000f2b 	.word	0x08000f2b
 8000de8:	08000f2b 	.word	0x08000f2b
 8000dec:	08000f2b 	.word	0x08000f2b
 8000df0:	08000f2b 	.word	0x08000f2b
 8000df4:	08000f2b 	.word	0x08000f2b
 8000df8:	08000f2b 	.word	0x08000f2b
 8000dfc:	08000f2b 	.word	0x08000f2b
 8000e00:	08000f2b 	.word	0x08000f2b
 8000e04:	08000f2b 	.word	0x08000f2b
 8000e08:	08000f2b 	.word	0x08000f2b
 8000e0c:	08000f2b 	.word	0x08000f2b
 8000e10:	08000f2b 	.word	0x08000f2b
 8000e14:	08000f2b 	.word	0x08000f2b
 8000e18:	08000f2b 	.word	0x08000f2b
 8000e1c:	08000f2b 	.word	0x08000f2b
 8000e20:	08000e5f 	.word	0x08000e5f
 8000e24:	2b40      	cmp	r3, #64	; 0x40
 8000e26:	d034      	beq.n	8000e92 <HAL_GPIO_EXTI_Callback+0x12e>
 8000e28:	e07f      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCHBUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8000e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2e:	4844      	ldr	r0, [pc, #272]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000e30:	f000 fcf4 	bl	800181c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 0, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	2310      	movs	r3, #16
 8000e3a:	9304      	str	r3, [sp, #16]
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4941      	ldr	r1, [pc, #260]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e52:	f7ff fc11 	bl	8000678 <addChar>
    	redraw = 1;
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
		break;
 8000e5c:	e065      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH1BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	4837      	ldr	r0, [pc, #220]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000e64:	f000 fcda 	bl	800181c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 1, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	9304      	str	r3, [sp, #16]
 8000e70:	2320      	movs	r3, #32
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4934      	ldr	r1, [pc, #208]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e84:	4834      	ldr	r0, [pc, #208]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e86:	f7ff fbf7 	bl	8000678 <addChar>
    	redraw = 1;
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
		break;
 8000e90:	e04b      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case ADDCH2BUTTON_Pin:
		HAL_GPIO_TogglePin(LEDPCB_GPIO_Port, LEDPCB_Pin);
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	482a      	ldr	r0, [pc, #168]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000e98:	f000 fcc0 	bl	800181c <HAL_GPIO_TogglePin>
    	addChar(expression, pages, page, 2, &cursor, &shift, &filled, EXPRWIDTH, SCREENWIDTH);
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	9303      	str	r3, [sp, #12]
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	4927      	ldr	r1, [pc, #156]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000eb8:	4827      	ldr	r0, [pc, #156]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000eba:	f7ff fbdd 	bl	8000678 <addChar>
    	redraw = 1;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
		break;
 8000ec4:	e031      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case LEFTBUTTON_Pin:
		moveLeft(filled, &cursor, &shift);
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000ecc:	4920      	ldr	r1, [pc, #128]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc28 	bl	8000724 <moveLeft>
		redraw = 1;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		break;
 8000eda:	e026      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case RIGHTBUTTON_Pin:
		moveRight(filled, &cursor, &shift, SCREENWIDTH);
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000ede:	7818      	ldrb	r0, [r3, #0]
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000ee4:	491a      	ldr	r1, [pc, #104]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ee6:	f7ff fc3f 	bl	8000768 <moveRight>
		redraw = 1;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
		break;
 8000ef0:	e01b      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case MENUBUTTON_Pin:
		nextPage(&page, NUMOFPAGES);
 8000ef2:	2106      	movs	r1, #6
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000ef6:	f7ff fc60 	bl	80007ba <nextPage>
		redrawmenu = 1;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
		break;
 8000f00:	e013      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case BACKBUTTON_Pin:
		redraw = 1;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
		break;
 8000f08:	e00f      	b.n	8000f2a <HAL_GPIO_EXTI_Callback+0x1c6>
	case EQBUTTON_Pin:
		computeEquation(expression, &filled, EXPRWIDTH);
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000f10:	f7ff f91c 	bl	800014c <computeEquation>
		cursor=filled;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f1a:	701a      	strb	r2, [r3, #0]
		shift=0;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
		redraw = 1;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
		break;
 8000f28:	bf00      	nop
	}
	buttonbeingpressed=0;
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_EXTI_Callback+0x1d0>
		return;
 8000f32:	bf00      	nop
}
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000111 	.word	0x20000111
 8000f40:	40011000 	.word	0x40011000
 8000f44:	200000e8 	.word	0x200000e8
 8000f48:	2000010e 	.word	0x2000010e
 8000f4c:	2000010d 	.word	0x2000010d
 8000f50:	2000010c 	.word	0x2000010c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	200000ec 	.word	0x200000ec
 8000f5c:	2000010f 	.word	0x2000010f
 8000f60:	20000110 	.word	0x20000110

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_MspInit+0x40>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_I2C_MspInit+0x94>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d134      	bne.n	800103e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_I2C_MspInit+0x98>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_I2C_MspInit+0x98>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_I2C_MspInit+0x98>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <HAL_I2C_MspInit+0x9c>)
 8001006:	f000 fa75 	bl	80014f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_I2C_MspInit+0xa0>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_I2C_MspInit+0xa0>)
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_I2C_MspInit+0x98>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_I2C_MspInit+0x98>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_I2C_MspInit+0x98>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010000 	.word	0x40010000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8db 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCHBUTTON_Pin);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fbd0 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BACKBUTTON_Pin);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f000 fbc9 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFTBUTTON_Pin);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 fbc2 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHTBUTTON_Pin);
 80010d4:	2008      	movs	r0, #8
 80010d6:	f000 fbbb 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENUBUTTON_Pin);
 80010e2:	2010      	movs	r0, #16
 80010e4:	f000 fbb4 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADDCH1BUTTON_Pin);
 80010f0:	2020      	movs	r0, #32
 80010f2:	f000 fbad 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADDCH2BUTTON_Pin);
 80010f6:	2040      	movs	r0, #64	; 0x40
 80010f8:	f000 fbaa 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EQBUTTON_Pin);
 80010fc:	2080      	movs	r0, #128	; 0x80
 80010fe:	f000 fba7 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f001 fd0e 	bl	8002b58 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20002800 	.word	0x20002800
 8001168:	00000400 	.word	0x00000400
 800116c:	20000114 	.word	0x20000114
 8001170:	20000268 	.word	0x20000268

08001174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001180:	f7ff fff8 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001186:	490c      	ldr	r1, [pc, #48]	; (80011b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800119c:	4c09      	ldr	r4, [pc, #36]	; (80011c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f001 fcdb 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fc45 	bl	8000a3c <main>
  bx lr
 80011b2:	4770      	bx	lr
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011bc:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 80011c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c4:	20000264 	.word	0x20000264

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f947 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fec2 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f95f 	bl	80014da <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001234:	f000 f927 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000014 	.word	0x20000014
 8001250:	2000001c 	.word	0x2000001c
 8001254:	20000018 	.word	0x20000018

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_IncTick+0x20>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	2000001c 	.word	0x2000001c
 8001278:	20000118 	.word	0x20000118

0800127c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000118 	.word	0x20000118

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fff0 	bl	800127c <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffe0 	bl	800127c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000001c 	.word	0x2000001c

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <__NVIC_EnableIRQ+0x34>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001450:	f7ff ff90 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff2d 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff42 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff35 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e161      	b.n	80017cc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001508:	2201      	movs	r2, #1
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8150 	bne.w	80017c6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a97      	ldr	r2, [pc, #604]	; (8001788 <HAL_GPIO_Init+0x294>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d05e      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001530:	4a95      	ldr	r2, [pc, #596]	; (8001788 <HAL_GPIO_Init+0x294>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d875      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001536:	4a95      	ldr	r2, [pc, #596]	; (800178c <HAL_GPIO_Init+0x298>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d058      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 800153c:	4a93      	ldr	r2, [pc, #588]	; (800178c <HAL_GPIO_Init+0x298>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d86f      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001542:	4a93      	ldr	r2, [pc, #588]	; (8001790 <HAL_GPIO_Init+0x29c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d052      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001548:	4a91      	ldr	r2, [pc, #580]	; (8001790 <HAL_GPIO_Init+0x29c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d869      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800154e:	4a91      	ldr	r2, [pc, #580]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d04c      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001554:	4a8f      	ldr	r2, [pc, #572]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d863      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800155a:	4a8f      	ldr	r2, [pc, #572]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d046      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001560:	4a8d      	ldr	r2, [pc, #564]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d85d      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d82a      	bhi.n	80015c0 <HAL_GPIO_Init+0xcc>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d859      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <HAL_GPIO_Init+0x80>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015c9 	.word	0x080015c9
 800157c:	080015db 	.word	0x080015db
 8001580:	0800161d 	.word	0x0800161d
 8001584:	08001623 	.word	0x08001623
 8001588:	08001623 	.word	0x08001623
 800158c:	08001623 	.word	0x08001623
 8001590:	08001623 	.word	0x08001623
 8001594:	08001623 	.word	0x08001623
 8001598:	08001623 	.word	0x08001623
 800159c:	08001623 	.word	0x08001623
 80015a0:	08001623 	.word	0x08001623
 80015a4:	08001623 	.word	0x08001623
 80015a8:	08001623 	.word	0x08001623
 80015ac:	08001623 	.word	0x08001623
 80015b0:	08001623 	.word	0x08001623
 80015b4:	08001623 	.word	0x08001623
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	4a76      	ldr	r2, [pc, #472]	; (800179c <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e029      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e024      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01f      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e01a      	b.n	8001624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e013      	b.n	8001624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e009      	b.n	8001624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e003      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x130>
          break;
 8001622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d801      	bhi.n	800162e <HAL_GPIO_Init+0x13a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x13e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d802      	bhi.n	8001640 <HAL_GPIO_Init+0x14c>
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x152>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3b08      	subs	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	210f      	movs	r1, #15
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a9 	beq.w	80017c6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001674:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1dc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	492b      	ldr	r1, [pc, #172]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4927      	ldr	r1, [pc, #156]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001718:	4013      	ands	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4921      	ldr	r1, [pc, #132]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001740:	4013      	ands	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4917      	ldr	r1, [pc, #92]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4913      	ldr	r1, [pc, #76]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001768:	4013      	ands	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01f      	beq.n	80017b8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	490d      	ldr	r1, [pc, #52]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e01f      	b.n	80017c6 <HAL_GPIO_Init+0x2d2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4909      	ldr	r1, [pc, #36]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae96 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	372c      	adds	r7, #44	; 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43d9      	mvns	r1, r3
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	400b      	ands	r3, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa78 	bl	8000d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e12b      	b.n	8001aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb84 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e4:	f001 f832 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a81      	ldr	r2, [pc, #516]	; (8001af4 <HAL_I2C_Init+0x274>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d807      	bhi.n	8001904 <HAL_I2C_Init+0x84>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a80      	ldr	r2, [pc, #512]	; (8001af8 <HAL_I2C_Init+0x278>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e006      	b.n	8001912 <HAL_I2C_Init+0x92>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a7d      	ldr	r2, [pc, #500]	; (8001afc <HAL_I2C_Init+0x27c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0e7      	b.n	8001aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a78      	ldr	r2, [pc, #480]	; (8001b00 <HAL_I2C_Init+0x280>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_I2C_Init+0x274>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <HAL_I2C_Init+0xd4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	e009      	b.n	8001968 <HAL_I2C_Init+0xe8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <HAL_I2C_Init+0x284>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800197a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	495c      	ldr	r1, [pc, #368]	; (8001af4 <HAL_I2C_Init+0x274>)
 8001984:	428b      	cmp	r3, r1
 8001986:	d819      	bhi.n	80019bc <HAL_I2C_Init+0x13c>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800199c:	400b      	ands	r3, r1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_I2C_Init+0x138>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e59      	subs	r1, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	e051      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e04f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_I2C_Init+0x168>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e012      	b.n	8001a0e <HAL_I2C_Init+0x18e>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x196>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e022      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <HAL_I2C_Init+0x1bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e58      	subs	r0, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6911      	ldr	r1, [r2, #16]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	001e847f 	.word	0x001e847f
 8001afc:	003d08ff 	.word	0x003d08ff
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	460b      	mov	r3, r1
 8001b16:	817b      	strh	r3, [r7, #10]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fbae 	bl	800127c <HAL_GetTick>
 8001b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	f040 80e0 	bne.w	8001cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2319      	movs	r3, #25
 8001b36:	2201      	movs	r2, #1
 8001b38:	4970      	ldr	r1, [pc, #448]	; (8001cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f964 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0d3      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2C_Master_Transmit+0x50>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e0cc      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d007      	beq.n	8001b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2221      	movs	r2, #33	; 0x21
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	893a      	ldrh	r2, [r7, #8]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f89c 	bl	8001d04 <I2C_MasterRequestWrite>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e08d      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bec:	e066      	b.n	8001cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa22 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d107      	bne.n	8001c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06b      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11b      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x188>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d017      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	6a39      	ldr	r1, [r7, #32]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa19 	bl	80020cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d107      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01a      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d194      	bne.n	8001bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e000      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00100002 	.word	0x00100002
 8001d00:	ffff0000 	.word	0xffff0000

08001d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d006      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d003      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d2c:	d108      	bne.n	8001d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e00b      	b.n	8001d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d107      	bne.n	8001d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f84f 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7e:	d103      	bne.n	8001d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e035      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d94:	d108      	bne.n	8001da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	e01b      	b.n	8001de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001da8:	897b      	ldrh	r3, [r7, #10]
 8001daa:	11db      	asrs	r3, r3, #7
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 0306 	and.w	r3, r3, #6
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f063 030f 	orn	r3, r3, #15
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <I2C_MasterRequestWrite+0xfc>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f898 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e010      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4907      	ldr	r1, [pc, #28]	; (8001e04 <I2C_MasterRequestWrite+0x100>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f888 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	00010008 	.word	0x00010008
 8001e04:	00010002 	.word	0x00010002

08001e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e18:	e048      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e20:	d044      	beq.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff fa2b 	bl	800127c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d139      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10d      	bne.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	e00c      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d116      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e023      	b.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	e00c      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d093      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0a:	e071      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d123      	bne.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e067      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6a:	d041      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7ff f986 	bl	800127c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d136      	bne.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	e00b      	b.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e021      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e00b      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4013      	ands	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f af6d 	bne.w	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002048:	e034      	b.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f886 	bl	800215c <I2C_IsAcknowledgeFailed>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e034      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002060:	d028      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff f90b 	bl	800127c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d016      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d1c3      	bne.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d8:	e034      	b.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f83e 	bl	800215c <I2C_IsAcknowledgeFailed>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e034      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f0:	d028      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7ff f8c3 	bl	800127c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11d      	bne.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d016      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d1c3      	bne.n	80020da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d11b      	bne.n	80021ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800217c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e272      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e24c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fff2 	bl	800127c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ffee 	bl	800127c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e200      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ffde 	bl	800127c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe ffda 	bl	800127c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ec      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c0      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe ff93 	bl	800127c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe ff8f 	bl	800127c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe ff72 	bl	800127c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ff6e 	bl	800127c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e180      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff52 	bl	800127c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff4e 	bl	800127c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e160      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 faba 	bl	8002974 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe ff38 	bl	800127c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe ff34 	bl	800127c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e146      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fef5 	bl	800127c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fef1 	bl	800127c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e103      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fea5 	bl	800127c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fea1 	bl	800127c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0b1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fe fe8f 	bl	800127c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fe8b 	bl	800127c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe5f 	bl	800127c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fe5b 	bl	800127c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e06d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	491b      	ldr	r1, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fe2f 	bl	800127c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fe2b 	bl	800127c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e035      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fe18 	bl	800127c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fe14 	bl	800127c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e026      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e01e      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e019      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x500>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fd66 	bl	800127c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fd62 	bl	800127c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fcc4 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	08002c58 	.word	0x08002c58
 8002888:	20000014 	.word	0x20000014
 800288c:	20000018 	.word	0x20000018

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	08002c70 	.word	0x08002c70
 8002930:	08002c80 	.word	0x08002c80
 8002934:	003d0900 	.word	0x003d0900

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <HAL_RCC_GetHCLKFreq+0x10>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	20000014 	.word	0x20000014

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002950:	f7ff fff2 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	08002c68 	.word	0x08002c68

08002974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <RCC_Delay+0x34>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <RCC_Delay+0x38>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002990:	bf00      	nop
  }
  while (Delay --);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <RCC_Delay+0x1c>
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000014 	.word	0x20000014
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <malloc>:
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <malloc+0xc>)
 80029b2:	4601      	mov	r1, r0
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	f000 b82b 	b.w	8002a10 <_malloc_r>
 80029ba:	bf00      	nop
 80029bc:	2000006c 	.word	0x2000006c

080029c0 <free>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <free+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f000 b8f3 	b.w	8002bb0 <_free_r>
 80029ca:	bf00      	nop
 80029cc:	2000006c 	.word	0x2000006c

080029d0 <sbrk_aligned>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4e0e      	ldr	r6, [pc, #56]	; (8002a0c <sbrk_aligned+0x3c>)
 80029d4:	460c      	mov	r4, r1
 80029d6:	6831      	ldr	r1, [r6, #0]
 80029d8:	4605      	mov	r5, r0
 80029da:	b911      	cbnz	r1, 80029e2 <sbrk_aligned+0x12>
 80029dc:	f000 f8ac 	bl	8002b38 <_sbrk_r>
 80029e0:	6030      	str	r0, [r6, #0]
 80029e2:	4621      	mov	r1, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 f8a7 	bl	8002b38 <_sbrk_r>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	d00a      	beq.n	8002a04 <sbrk_aligned+0x34>
 80029ee:	1cc4      	adds	r4, r0, #3
 80029f0:	f024 0403 	bic.w	r4, r4, #3
 80029f4:	42a0      	cmp	r0, r4
 80029f6:	d007      	beq.n	8002a08 <sbrk_aligned+0x38>
 80029f8:	1a21      	subs	r1, r4, r0
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 f89c 	bl	8002b38 <_sbrk_r>
 8002a00:	3001      	adds	r0, #1
 8002a02:	d101      	bne.n	8002a08 <sbrk_aligned+0x38>
 8002a04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	20000120 	.word	0x20000120

08002a10 <_malloc_r>:
 8002a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a14:	1ccd      	adds	r5, r1, #3
 8002a16:	f025 0503 	bic.w	r5, r5, #3
 8002a1a:	3508      	adds	r5, #8
 8002a1c:	2d0c      	cmp	r5, #12
 8002a1e:	bf38      	it	cc
 8002a20:	250c      	movcc	r5, #12
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	4607      	mov	r7, r0
 8002a26:	db01      	blt.n	8002a2c <_malloc_r+0x1c>
 8002a28:	42a9      	cmp	r1, r5
 8002a2a:	d905      	bls.n	8002a38 <_malloc_r+0x28>
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	2600      	movs	r6, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4630      	mov	r0, r6
 8002a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b0c <_malloc_r+0xfc>
 8002a3c:	f000 f868 	bl	8002b10 <__malloc_lock>
 8002a40:	f8d8 3000 	ldr.w	r3, [r8]
 8002a44:	461c      	mov	r4, r3
 8002a46:	bb5c      	cbnz	r4, 8002aa0 <_malloc_r+0x90>
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f7ff ffc0 	bl	80029d0 <sbrk_aligned>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	4604      	mov	r4, r0
 8002a54:	d155      	bne.n	8002b02 <_malloc_r+0xf2>
 8002a56:	f8d8 4000 	ldr.w	r4, [r8]
 8002a5a:	4626      	mov	r6, r4
 8002a5c:	2e00      	cmp	r6, #0
 8002a5e:	d145      	bne.n	8002aec <_malloc_r+0xdc>
 8002a60:	2c00      	cmp	r4, #0
 8002a62:	d048      	beq.n	8002af6 <_malloc_r+0xe6>
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	4631      	mov	r1, r6
 8002a68:	4638      	mov	r0, r7
 8002a6a:	eb04 0903 	add.w	r9, r4, r3
 8002a6e:	f000 f863 	bl	8002b38 <_sbrk_r>
 8002a72:	4581      	cmp	r9, r0
 8002a74:	d13f      	bne.n	8002af6 <_malloc_r+0xe6>
 8002a76:	6821      	ldr	r1, [r4, #0]
 8002a78:	4638      	mov	r0, r7
 8002a7a:	1a6d      	subs	r5, r5, r1
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7ff ffa7 	bl	80029d0 <sbrk_aligned>
 8002a82:	3001      	adds	r0, #1
 8002a84:	d037      	beq.n	8002af6 <_malloc_r+0xe6>
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	442b      	add	r3, r5
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d038      	beq.n	8002b06 <_malloc_r+0xf6>
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	42a2      	cmp	r2, r4
 8002a98:	d12b      	bne.n	8002af2 <_malloc_r+0xe2>
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e00f      	b.n	8002ac0 <_malloc_r+0xb0>
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	1b52      	subs	r2, r2, r5
 8002aa4:	d41f      	bmi.n	8002ae6 <_malloc_r+0xd6>
 8002aa6:	2a0b      	cmp	r2, #11
 8002aa8:	d917      	bls.n	8002ada <_malloc_r+0xca>
 8002aaa:	1961      	adds	r1, r4, r5
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	6025      	str	r5, [r4, #0]
 8002ab0:	bf18      	it	ne
 8002ab2:	6059      	strne	r1, [r3, #4]
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	bf08      	it	eq
 8002ab8:	f8c8 1000 	streq.w	r1, [r8]
 8002abc:	5162      	str	r2, [r4, r5]
 8002abe:	604b      	str	r3, [r1, #4]
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	f104 060b 	add.w	r6, r4, #11
 8002ac6:	f000 f829 	bl	8002b1c <__malloc_unlock>
 8002aca:	f026 0607 	bic.w	r6, r6, #7
 8002ace:	1d23      	adds	r3, r4, #4
 8002ad0:	1af2      	subs	r2, r6, r3
 8002ad2:	d0ae      	beq.n	8002a32 <_malloc_r+0x22>
 8002ad4:	1b9b      	subs	r3, r3, r6
 8002ad6:	50a3      	str	r3, [r4, r2]
 8002ad8:	e7ab      	b.n	8002a32 <_malloc_r+0x22>
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	6862      	ldr	r2, [r4, #4]
 8002ade:	d1dd      	bne.n	8002a9c <_malloc_r+0x8c>
 8002ae0:	f8c8 2000 	str.w	r2, [r8]
 8002ae4:	e7ec      	b.n	8002ac0 <_malloc_r+0xb0>
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	6864      	ldr	r4, [r4, #4]
 8002aea:	e7ac      	b.n	8002a46 <_malloc_r+0x36>
 8002aec:	4634      	mov	r4, r6
 8002aee:	6876      	ldr	r6, [r6, #4]
 8002af0:	e7b4      	b.n	8002a5c <_malloc_r+0x4c>
 8002af2:	4613      	mov	r3, r2
 8002af4:	e7cc      	b.n	8002a90 <_malloc_r+0x80>
 8002af6:	230c      	movs	r3, #12
 8002af8:	4638      	mov	r0, r7
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	f000 f80e 	bl	8002b1c <__malloc_unlock>
 8002b00:	e797      	b.n	8002a32 <_malloc_r+0x22>
 8002b02:	6025      	str	r5, [r4, #0]
 8002b04:	e7dc      	b.n	8002ac0 <_malloc_r+0xb0>
 8002b06:	605b      	str	r3, [r3, #4]
 8002b08:	deff      	udf	#255	; 0xff
 8002b0a:	bf00      	nop
 8002b0c:	2000011c 	.word	0x2000011c

08002b10 <__malloc_lock>:
 8002b10:	4801      	ldr	r0, [pc, #4]	; (8002b18 <__malloc_lock+0x8>)
 8002b12:	f000 b84b 	b.w	8002bac <__retarget_lock_acquire_recursive>
 8002b16:	bf00      	nop
 8002b18:	20000260 	.word	0x20000260

08002b1c <__malloc_unlock>:
 8002b1c:	4801      	ldr	r0, [pc, #4]	; (8002b24 <__malloc_unlock+0x8>)
 8002b1e:	f000 b846 	b.w	8002bae <__retarget_lock_release_recursive>
 8002b22:	bf00      	nop
 8002b24:	20000260 	.word	0x20000260

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <_sbrk_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	4d05      	ldr	r5, [pc, #20]	; (8002b54 <_sbrk_r+0x1c>)
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	f7fe fae0 	bl	8001108 <_sbrk>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d102      	bne.n	8002b52 <_sbrk_r+0x1a>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	b103      	cbz	r3, 8002b52 <_sbrk_r+0x1a>
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	2000025c 	.word	0x2000025c

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000006c 	.word	0x2000006c

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4d0c      	ldr	r5, [pc, #48]	; (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	f000 f864 	bl	8002c40 <_init>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002c84 	.word	0x08002c84
 8002ba0:	08002c84 	.word	0x08002c84
 8002ba4:	08002c84 	.word	0x08002c84
 8002ba8:	08002c88 	.word	0x08002c88

08002bac <__retarget_lock_acquire_recursive>:
 8002bac:	4770      	bx	lr

08002bae <__retarget_lock_release_recursive>:
 8002bae:	4770      	bx	lr

08002bb0 <_free_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	2900      	cmp	r1, #0
 8002bb6:	d040      	beq.n	8002c3a <_free_r+0x8a>
 8002bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bbc:	1f0c      	subs	r4, r1, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bfb8      	it	lt
 8002bc2:	18e4      	addlt	r4, r4, r3
 8002bc4:	f7ff ffa4 	bl	8002b10 <__malloc_lock>
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <_free_r+0x8c>)
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	b933      	cbnz	r3, 8002bdc <_free_r+0x2c>
 8002bce:	6063      	str	r3, [r4, #4]
 8002bd0:	6014      	str	r4, [r2, #0]
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bd8:	f7ff bfa0 	b.w	8002b1c <__malloc_unlock>
 8002bdc:	42a3      	cmp	r3, r4
 8002bde:	d908      	bls.n	8002bf2 <_free_r+0x42>
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	1821      	adds	r1, r4, r0
 8002be4:	428b      	cmp	r3, r1
 8002be6:	bf01      	itttt	eq
 8002be8:	6819      	ldreq	r1, [r3, #0]
 8002bea:	685b      	ldreq	r3, [r3, #4]
 8002bec:	1809      	addeq	r1, r1, r0
 8002bee:	6021      	streq	r1, [r4, #0]
 8002bf0:	e7ed      	b.n	8002bce <_free_r+0x1e>
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	b10b      	cbz	r3, 8002bfc <_free_r+0x4c>
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	d9fa      	bls.n	8002bf2 <_free_r+0x42>
 8002bfc:	6811      	ldr	r1, [r2, #0]
 8002bfe:	1850      	adds	r0, r2, r1
 8002c00:	42a0      	cmp	r0, r4
 8002c02:	d10b      	bne.n	8002c1c <_free_r+0x6c>
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	4401      	add	r1, r0
 8002c08:	1850      	adds	r0, r2, r1
 8002c0a:	4283      	cmp	r3, r0
 8002c0c:	6011      	str	r1, [r2, #0]
 8002c0e:	d1e0      	bne.n	8002bd2 <_free_r+0x22>
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4408      	add	r0, r1
 8002c16:	6010      	str	r0, [r2, #0]
 8002c18:	6053      	str	r3, [r2, #4]
 8002c1a:	e7da      	b.n	8002bd2 <_free_r+0x22>
 8002c1c:	d902      	bls.n	8002c24 <_free_r+0x74>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	602b      	str	r3, [r5, #0]
 8002c22:	e7d6      	b.n	8002bd2 <_free_r+0x22>
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	1821      	adds	r1, r4, r0
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	bf01      	itttt	eq
 8002c2c:	6819      	ldreq	r1, [r3, #0]
 8002c2e:	685b      	ldreq	r3, [r3, #4]
 8002c30:	1809      	addeq	r1, r1, r0
 8002c32:	6021      	streq	r1, [r4, #0]
 8002c34:	6063      	str	r3, [r4, #4]
 8002c36:	6054      	str	r4, [r2, #4]
 8002c38:	e7cb      	b.n	8002bd2 <_free_r+0x22>
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	2000011c 	.word	0x2000011c

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
